// Code generated by protoc-gen-go. DO NOT EDIT.
// versions:
// 	protoc-gen-go v1.26.0
// 	protoc        v3.13.0
// source: pb/geocube.proto

package geocube

import (
	context "context"
	_ "google.golang.org/genproto/googleapis/api/annotations"
	grpc "google.golang.org/grpc"
	codes "google.golang.org/grpc/codes"
	status "google.golang.org/grpc/status"
	protoreflect "google.golang.org/protobuf/reflect/protoreflect"
	protoimpl "google.golang.org/protobuf/runtime/protoimpl"
	reflect "reflect"
	sync "sync"
)

const (
	// Verify that this generated code is sufficiently up-to-date.
	_ = protoimpl.EnforceVersion(20 - protoimpl.MinVersion)
	// Verify that runtime/protoimpl is sufficiently up-to-date.
	_ = protoimpl.EnforceVersion(protoimpl.MaxVersion - 20)
)

//*
// Request the version of the Geocube Server
type GetVersionRequest struct {
	state         protoimpl.MessageState
	sizeCache     protoimpl.SizeCache
	unknownFields protoimpl.UnknownFields
}

func (x *GetVersionRequest) Reset() {
	*x = GetVersionRequest{}
	if protoimpl.UnsafeEnabled {
		mi := &file_pb_geocube_proto_msgTypes[0]
		ms := protoimpl.X.MessageStateOf(protoimpl.Pointer(x))
		ms.StoreMessageInfo(mi)
	}
}

func (x *GetVersionRequest) String() string {
	return protoimpl.X.MessageStringOf(x)
}

func (*GetVersionRequest) ProtoMessage() {}

func (x *GetVersionRequest) ProtoReflect() protoreflect.Message {
	mi := &file_pb_geocube_proto_msgTypes[0]
	if protoimpl.UnsafeEnabled && x != nil {
		ms := protoimpl.X.MessageStateOf(protoimpl.Pointer(x))
		if ms.LoadMessageInfo() == nil {
			ms.StoreMessageInfo(mi)
		}
		return ms
	}
	return mi.MessageOf(x)
}

// Deprecated: Use GetVersionRequest.ProtoReflect.Descriptor instead.
func (*GetVersionRequest) Descriptor() ([]byte, []int) {
	return file_pb_geocube_proto_rawDescGZIP(), []int{0}
}

//*
// Return the version of the Geocube Server
type GetVersionResponse struct {
	state         protoimpl.MessageState
	sizeCache     protoimpl.SizeCache
	unknownFields protoimpl.UnknownFields

	Version string `protobuf:"bytes,1,opt,name=Version,proto3" json:"Version,omitempty"`
}

func (x *GetVersionResponse) Reset() {
	*x = GetVersionResponse{}
	if protoimpl.UnsafeEnabled {
		mi := &file_pb_geocube_proto_msgTypes[1]
		ms := protoimpl.X.MessageStateOf(protoimpl.Pointer(x))
		ms.StoreMessageInfo(mi)
	}
}

func (x *GetVersionResponse) String() string {
	return protoimpl.X.MessageStringOf(x)
}

func (*GetVersionResponse) ProtoMessage() {}

func (x *GetVersionResponse) ProtoReflect() protoreflect.Message {
	mi := &file_pb_geocube_proto_msgTypes[1]
	if protoimpl.UnsafeEnabled && x != nil {
		ms := protoimpl.X.MessageStateOf(protoimpl.Pointer(x))
		if ms.LoadMessageInfo() == nil {
			ms.StoreMessageInfo(mi)
		}
		return ms
	}
	return mi.MessageOf(x)
}

// Deprecated: Use GetVersionResponse.ProtoReflect.Descriptor instead.
func (*GetVersionResponse) Descriptor() ([]byte, []int) {
	return file_pb_geocube_proto_rawDescGZIP(), []int{1}
}

func (x *GetVersionResponse) GetVersion() string {
	if x != nil {
		return x.Version
	}
	return ""
}

var File_pb_geocube_proto protoreflect.FileDescriptor

var file_pb_geocube_proto_rawDesc = []byte{
	0x0a, 0x10, 0x70, 0x62, 0x2f, 0x67, 0x65, 0x6f, 0x63, 0x75, 0x62, 0x65, 0x2e, 0x70, 0x72, 0x6f,
	0x74, 0x6f, 0x12, 0x07, 0x67, 0x65, 0x6f, 0x63, 0x75, 0x62, 0x65, 0x1a, 0x1c, 0x67, 0x6f, 0x6f,
	0x67, 0x6c, 0x65, 0x2f, 0x61, 0x70, 0x69, 0x2f, 0x61, 0x6e, 0x6e, 0x6f, 0x74, 0x61, 0x74, 0x69,
	0x6f, 0x6e, 0x73, 0x2e, 0x70, 0x72, 0x6f, 0x74, 0x6f, 0x1a, 0x10, 0x70, 0x62, 0x2f, 0x63, 0x61,
	0x74, 0x61, 0x6c, 0x6f, 0x67, 0x2e, 0x70, 0x72, 0x6f, 0x74, 0x6f, 0x1a, 0x10, 0x70, 0x62, 0x2f,
	0x72, 0x65, 0x63, 0x6f, 0x72, 0x64, 0x73, 0x2e, 0x70, 0x72, 0x6f, 0x74, 0x6f, 0x1a, 0x12, 0x70,
	0x62, 0x2f, 0x76, 0x61, 0x72, 0x69, 0x61, 0x62, 0x6c, 0x65, 0x73, 0x2e, 0x70, 0x72, 0x6f, 0x74,
	0x6f, 0x1a, 0x10, 0x70, 0x62, 0x2f, 0x6c, 0x61, 0x79, 0x6f, 0x75, 0x74, 0x73, 0x2e, 0x70, 0x72,
	0x6f, 0x74, 0x6f, 0x1a, 0x13, 0x70, 0x62, 0x2f, 0x6f, 0x70, 0x65, 0x72, 0x61, 0x74, 0x69, 0x6f,
	0x6e, 0x73, 0x2e, 0x70, 0x72, 0x6f, 0x74, 0x6f, 0x22, 0x13, 0x0a, 0x11, 0x47, 0x65, 0x74, 0x56,
	0x65, 0x72, 0x73, 0x69, 0x6f, 0x6e, 0x52, 0x65, 0x71, 0x75, 0x65, 0x73, 0x74, 0x22, 0x2e, 0x0a,
	0x12, 0x47, 0x65, 0x74, 0x56, 0x65, 0x72, 0x73, 0x69, 0x6f, 0x6e, 0x52, 0x65, 0x73, 0x70, 0x6f,
	0x6e, 0x73, 0x65, 0x12, 0x18, 0x0a, 0x07, 0x56, 0x65, 0x72, 0x73, 0x69, 0x6f, 0x6e, 0x18, 0x01,
	0x20, 0x01, 0x28, 0x09, 0x52, 0x07, 0x56, 0x65, 0x72, 0x73, 0x69, 0x6f, 0x6e, 0x32, 0xd6, 0x16,
	0x0a, 0x07, 0x47, 0x65, 0x6f, 0x63, 0x75, 0x62, 0x65, 0x12, 0x50, 0x0a, 0x0b, 0x4c, 0x69, 0x73,
	0x74, 0x52, 0x65, 0x63, 0x6f, 0x72, 0x64, 0x73, 0x12, 0x1b, 0x2e, 0x67, 0x65, 0x6f, 0x63, 0x75,
	0x62, 0x65, 0x2e, 0x4c, 0x69, 0x73, 0x74, 0x52, 0x65, 0x63, 0x6f, 0x72, 0x64, 0x73, 0x52, 0x65,
	0x71, 0x75, 0x65, 0x73, 0x74, 0x1a, 0x20, 0x2e, 0x67, 0x65, 0x6f, 0x63, 0x75, 0x62, 0x65, 0x2e,
	0x4c, 0x69, 0x73, 0x74, 0x52, 0x65, 0x63, 0x6f, 0x72, 0x64, 0x73, 0x52, 0x65, 0x73, 0x70, 0x6f,
	0x6e, 0x73, 0x65, 0x49, 0x74, 0x65, 0x6d, 0x22, 0x00, 0x30, 0x01, 0x12, 0x50, 0x0a, 0x0d, 0x43,
	0x72, 0x65, 0x61, 0x74, 0x65, 0x52, 0x65, 0x63, 0x6f, 0x72, 0x64, 0x73, 0x12, 0x1d, 0x2e, 0x67,
	0x65, 0x6f, 0x63, 0x75, 0x62, 0x65, 0x2e, 0x43, 0x72, 0x65, 0x61, 0x74, 0x65, 0x52, 0x65, 0x63,
	0x6f, 0x72, 0x64, 0x73, 0x52, 0x65, 0x71, 0x75, 0x65, 0x73, 0x74, 0x1a, 0x1e, 0x2e, 0x67, 0x65,
	0x6f, 0x63, 0x75, 0x62, 0x65, 0x2e, 0x43, 0x72, 0x65, 0x61, 0x74, 0x65, 0x52, 0x65, 0x63, 0x6f,
	0x72, 0x64, 0x73, 0x52, 0x65, 0x73, 0x70, 0x6f, 0x6e, 0x73, 0x65, 0x22, 0x00, 0x12, 0x50, 0x0a,
	0x0d, 0x44, 0x65, 0x6c, 0x65, 0x74, 0x65, 0x52, 0x65, 0x63, 0x6f, 0x72, 0x64, 0x73, 0x12, 0x1d,
	0x2e, 0x67, 0x65, 0x6f, 0x63, 0x75, 0x62, 0x65, 0x2e, 0x44, 0x65, 0x6c, 0x65, 0x74, 0x65, 0x52,
	0x65, 0x63, 0x6f, 0x72, 0x64, 0x73, 0x52, 0x65, 0x71, 0x75, 0x65, 0x73, 0x74, 0x1a, 0x1e, 0x2e,
	0x67, 0x65, 0x6f, 0x63, 0x75, 0x62, 0x65, 0x2e, 0x44, 0x65, 0x6c, 0x65, 0x74, 0x65, 0x52, 0x65,
	0x63, 0x6f, 0x72, 0x64, 0x73, 0x52, 0x65, 0x73, 0x70, 0x6f, 0x6e, 0x73, 0x65, 0x22, 0x00, 0x12,
	0x53, 0x0a, 0x0e, 0x41, 0x64, 0x64, 0x52, 0x65, 0x63, 0x6f, 0x72, 0x64, 0x73, 0x54, 0x61, 0x67,
	0x73, 0x12, 0x1e, 0x2e, 0x67, 0x65, 0x6f, 0x63, 0x75, 0x62, 0x65, 0x2e, 0x41, 0x64, 0x64, 0x52,
	0x65, 0x63, 0x6f, 0x72, 0x64, 0x73, 0x54, 0x61, 0x67, 0x73, 0x52, 0x65, 0x71, 0x75, 0x65, 0x73,
	0x74, 0x1a, 0x1f, 0x2e, 0x67, 0x65, 0x6f, 0x63, 0x75, 0x62, 0x65, 0x2e, 0x41, 0x64, 0x64, 0x52,
	0x65, 0x63, 0x6f, 0x72, 0x64, 0x73, 0x54, 0x61, 0x67, 0x73, 0x52, 0x65, 0x73, 0x70, 0x6f, 0x6e,
	0x73, 0x65, 0x22, 0x00, 0x12, 0x5c, 0x0a, 0x11, 0x52, 0x65, 0x6d, 0x6f, 0x76, 0x65, 0x52, 0x65,
	0x63, 0x6f, 0x72, 0x64, 0x73, 0x54, 0x61, 0x67, 0x73, 0x12, 0x21, 0x2e, 0x67, 0x65, 0x6f, 0x63,
	0x75, 0x62, 0x65, 0x2e, 0x52, 0x65, 0x6d, 0x6f, 0x76, 0x65, 0x52, 0x65, 0x63, 0x6f, 0x72, 0x64,
	0x73, 0x54, 0x61, 0x67, 0x73, 0x52, 0x65, 0x71, 0x75, 0x65, 0x73, 0x74, 0x1a, 0x22, 0x2e, 0x67,
	0x65, 0x6f, 0x63, 0x75, 0x62, 0x65, 0x2e, 0x52, 0x65, 0x6d, 0x6f, 0x76, 0x65, 0x52, 0x65, 0x63,
	0x6f, 0x72, 0x64, 0x73, 0x54, 0x61, 0x67, 0x73, 0x52, 0x65, 0x73, 0x70, 0x6f, 0x6e, 0x73, 0x65,
	0x22, 0x00, 0x12, 0x44, 0x0a, 0x09, 0x43, 0x72, 0x65, 0x61, 0x74, 0x65, 0x41, 0x4f, 0x49, 0x12,
	0x19, 0x2e, 0x67, 0x65, 0x6f, 0x63, 0x75, 0x62, 0x65, 0x2e, 0x43, 0x72, 0x65, 0x61, 0x74, 0x65,
	0x41, 0x4f, 0x49, 0x52, 0x65, 0x71, 0x75, 0x65, 0x73, 0x74, 0x1a, 0x1a, 0x2e, 0x67, 0x65, 0x6f,
	0x63, 0x75, 0x62, 0x65, 0x2e, 0x43, 0x72, 0x65, 0x61, 0x74, 0x65, 0x41, 0x4f, 0x49, 0x52, 0x65,
	0x73, 0x70, 0x6f, 0x6e, 0x73, 0x65, 0x22, 0x00, 0x12, 0x3b, 0x0a, 0x06, 0x47, 0x65, 0x74, 0x41,
	0x4f, 0x49, 0x12, 0x16, 0x2e, 0x67, 0x65, 0x6f, 0x63, 0x75, 0x62, 0x65, 0x2e, 0x47, 0x65, 0x74,
	0x41, 0x4f, 0x49, 0x52, 0x65, 0x71, 0x75, 0x65, 0x73, 0x74, 0x1a, 0x17, 0x2e, 0x67, 0x65, 0x6f,
	0x63, 0x75, 0x62, 0x65, 0x2e, 0x47, 0x65, 0x74, 0x41, 0x4f, 0x49, 0x52, 0x65, 0x73, 0x70, 0x6f,
	0x6e, 0x73, 0x65, 0x22, 0x00, 0x12, 0x53, 0x0a, 0x0e, 0x43, 0x72, 0x65, 0x61, 0x74, 0x65, 0x56,
	0x61, 0x72, 0x69, 0x61, 0x62, 0x6c, 0x65, 0x12, 0x1e, 0x2e, 0x67, 0x65, 0x6f, 0x63, 0x75, 0x62,
	0x65, 0x2e, 0x43, 0x72, 0x65, 0x61, 0x74, 0x65, 0x56, 0x61, 0x72, 0x69, 0x61, 0x62, 0x6c, 0x65,
	0x52, 0x65, 0x71, 0x75, 0x65, 0x73, 0x74, 0x1a, 0x1f, 0x2e, 0x67, 0x65, 0x6f, 0x63, 0x75, 0x62,
	0x65, 0x2e, 0x43, 0x72, 0x65, 0x61, 0x74, 0x65, 0x56, 0x61, 0x72, 0x69, 0x61, 0x62, 0x6c, 0x65,
	0x52, 0x65, 0x73, 0x70, 0x6f, 0x6e, 0x73, 0x65, 0x22, 0x00, 0x12, 0x62, 0x0a, 0x13, 0x49, 0x6e,
	0x73, 0x74, 0x61, 0x6e, 0x74, 0x69, 0x61, 0x74, 0x65, 0x56, 0x61, 0x72, 0x69, 0x61, 0x62, 0x6c,
	0x65, 0x12, 0x23, 0x2e, 0x67, 0x65, 0x6f, 0x63, 0x75, 0x62, 0x65, 0x2e, 0x49, 0x6e, 0x73, 0x74,
	0x61, 0x6e, 0x74, 0x69, 0x61, 0x74, 0x65, 0x56, 0x61, 0x72, 0x69, 0x61, 0x62, 0x6c, 0x65, 0x52,
	0x65, 0x71, 0x75, 0x65, 0x73, 0x74, 0x1a, 0x24, 0x2e, 0x67, 0x65, 0x6f, 0x63, 0x75, 0x62, 0x65,
	0x2e, 0x49, 0x6e, 0x73, 0x74, 0x61, 0x6e, 0x74, 0x69, 0x61, 0x74, 0x65, 0x56, 0x61, 0x72, 0x69,
	0x61, 0x62, 0x6c, 0x65, 0x52, 0x65, 0x73, 0x70, 0x6f, 0x6e, 0x73, 0x65, 0x22, 0x00, 0x12, 0x4a,
	0x0a, 0x0b, 0x47, 0x65, 0x74, 0x56, 0x61, 0x72, 0x69, 0x61, 0x62, 0x6c, 0x65, 0x12, 0x1b, 0x2e,
	0x67, 0x65, 0x6f, 0x63, 0x75, 0x62, 0x65, 0x2e, 0x47, 0x65, 0x74, 0x56, 0x61, 0x72, 0x69, 0x61,
	0x62, 0x6c, 0x65, 0x52, 0x65, 0x71, 0x75, 0x65, 0x73, 0x74, 0x1a, 0x1c, 0x2e, 0x67, 0x65, 0x6f,
	0x63, 0x75, 0x62, 0x65, 0x2e, 0x47, 0x65, 0x74, 0x56, 0x61, 0x72, 0x69, 0x61, 0x62, 0x6c, 0x65,
	0x52, 0x65, 0x73, 0x70, 0x6f, 0x6e, 0x73, 0x65, 0x22, 0x00, 0x12, 0x56, 0x0a, 0x0d, 0x4c, 0x69,
	0x73, 0x74, 0x56, 0x61, 0x72, 0x69, 0x61, 0x62, 0x6c, 0x65, 0x73, 0x12, 0x1d, 0x2e, 0x67, 0x65,
	0x6f, 0x63, 0x75, 0x62, 0x65, 0x2e, 0x4c, 0x69, 0x73, 0x74, 0x56, 0x61, 0x72, 0x69, 0x61, 0x62,
	0x6c, 0x65, 0x73, 0x52, 0x65, 0x71, 0x75, 0x65, 0x73, 0x74, 0x1a, 0x22, 0x2e, 0x67, 0x65, 0x6f,
	0x63, 0x75, 0x62, 0x65, 0x2e, 0x4c, 0x69, 0x73, 0x74, 0x56, 0x61, 0x72, 0x69, 0x61, 0x62, 0x6c,
	0x65, 0x73, 0x52, 0x65, 0x73, 0x70, 0x6f, 0x6e, 0x73, 0x65, 0x49, 0x74, 0x65, 0x6d, 0x22, 0x00,
	0x30, 0x01, 0x12, 0x53, 0x0a, 0x0e, 0x55, 0x70, 0x64, 0x61, 0x74, 0x65, 0x56, 0x61, 0x72, 0x69,
	0x61, 0x62, 0x6c, 0x65, 0x12, 0x1e, 0x2e, 0x67, 0x65, 0x6f, 0x63, 0x75, 0x62, 0x65, 0x2e, 0x55,
	0x70, 0x64, 0x61, 0x74, 0x65, 0x56, 0x61, 0x72, 0x69, 0x61, 0x62, 0x6c, 0x65, 0x52, 0x65, 0x71,
	0x75, 0x65, 0x73, 0x74, 0x1a, 0x1f, 0x2e, 0x67, 0x65, 0x6f, 0x63, 0x75, 0x62, 0x65, 0x2e, 0x55,
	0x70, 0x64, 0x61, 0x74, 0x65, 0x56, 0x61, 0x72, 0x69, 0x61, 0x62, 0x6c, 0x65, 0x52, 0x65, 0x73,
	0x70, 0x6f, 0x6e, 0x73, 0x65, 0x22, 0x00, 0x12, 0x53, 0x0a, 0x0e, 0x55, 0x70, 0x64, 0x61, 0x74,
	0x65, 0x49, 0x6e, 0x73, 0x74, 0x61, 0x6e, 0x63, 0x65, 0x12, 0x1e, 0x2e, 0x67, 0x65, 0x6f, 0x63,
	0x75, 0x62, 0x65, 0x2e, 0x55, 0x70, 0x64, 0x61, 0x74, 0x65, 0x49, 0x6e, 0x73, 0x74, 0x61, 0x6e,
	0x63, 0x65, 0x52, 0x65, 0x71, 0x75, 0x65, 0x73, 0x74, 0x1a, 0x1f, 0x2e, 0x67, 0x65, 0x6f, 0x63,
	0x75, 0x62, 0x65, 0x2e, 0x55, 0x70, 0x64, 0x61, 0x74, 0x65, 0x49, 0x6e, 0x73, 0x74, 0x61, 0x6e,
	0x63, 0x65, 0x52, 0x65, 0x73, 0x70, 0x6f, 0x6e, 0x73, 0x65, 0x22, 0x00, 0x12, 0x53, 0x0a, 0x0e,
	0x44, 0x65, 0x6c, 0x65, 0x74, 0x65, 0x56, 0x61, 0x72, 0x69, 0x61, 0x62, 0x6c, 0x65, 0x12, 0x1e,
	0x2e, 0x67, 0x65, 0x6f, 0x63, 0x75, 0x62, 0x65, 0x2e, 0x44, 0x65, 0x6c, 0x65, 0x74, 0x65, 0x56,
	0x61, 0x72, 0x69, 0x61, 0x62, 0x6c, 0x65, 0x52, 0x65, 0x71, 0x75, 0x65, 0x73, 0x74, 0x1a, 0x1f,
	0x2e, 0x67, 0x65, 0x6f, 0x63, 0x75, 0x62, 0x65, 0x2e, 0x44, 0x65, 0x6c, 0x65, 0x74, 0x65, 0x56,
	0x61, 0x72, 0x69, 0x61, 0x62, 0x6c, 0x65, 0x52, 0x65, 0x73, 0x70, 0x6f, 0x6e, 0x73, 0x65, 0x22,
	0x00, 0x12, 0x53, 0x0a, 0x0e, 0x44, 0x65, 0x6c, 0x65, 0x74, 0x65, 0x49, 0x6e, 0x73, 0x74, 0x61,
	0x6e, 0x63, 0x65, 0x12, 0x1e, 0x2e, 0x67, 0x65, 0x6f, 0x63, 0x75, 0x62, 0x65, 0x2e, 0x44, 0x65,
	0x6c, 0x65, 0x74, 0x65, 0x49, 0x6e, 0x73, 0x74, 0x61, 0x6e, 0x63, 0x65, 0x52, 0x65, 0x71, 0x75,
	0x65, 0x73, 0x74, 0x1a, 0x1f, 0x2e, 0x67, 0x65, 0x6f, 0x63, 0x75, 0x62, 0x65, 0x2e, 0x44, 0x65,
	0x6c, 0x65, 0x74, 0x65, 0x49, 0x6e, 0x73, 0x74, 0x61, 0x6e, 0x63, 0x65, 0x52, 0x65, 0x73, 0x70,
	0x6f, 0x6e, 0x73, 0x65, 0x22, 0x00, 0x12, 0x50, 0x0a, 0x0d, 0x43, 0x72, 0x65, 0x61, 0x74, 0x65,
	0x50, 0x61, 0x6c, 0x65, 0x74, 0x74, 0x65, 0x12, 0x1d, 0x2e, 0x67, 0x65, 0x6f, 0x63, 0x75, 0x62,
	0x65, 0x2e, 0x43, 0x72, 0x65, 0x61, 0x74, 0x65, 0x50, 0x61, 0x6c, 0x65, 0x74, 0x74, 0x65, 0x52,
	0x65, 0x71, 0x75, 0x65, 0x73, 0x74, 0x1a, 0x1e, 0x2e, 0x67, 0x65, 0x6f, 0x63, 0x75, 0x62, 0x65,
	0x2e, 0x43, 0x72, 0x65, 0x61, 0x74, 0x65, 0x50, 0x61, 0x6c, 0x65, 0x74, 0x74, 0x65, 0x52, 0x65,
	0x73, 0x70, 0x6f, 0x6e, 0x73, 0x65, 0x22, 0x00, 0x12, 0x50, 0x0a, 0x0d, 0x49, 0x6e, 0x64, 0x65,
	0x78, 0x44, 0x61, 0x74, 0x61, 0x73, 0x65, 0x74, 0x73, 0x12, 0x1d, 0x2e, 0x67, 0x65, 0x6f, 0x63,
	0x75, 0x62, 0x65, 0x2e, 0x49, 0x6e, 0x64, 0x65, 0x78, 0x44, 0x61, 0x74, 0x61, 0x73, 0x65, 0x74,
	0x73, 0x52, 0x65, 0x71, 0x75, 0x65, 0x73, 0x74, 0x1a, 0x1e, 0x2e, 0x67, 0x65, 0x6f, 0x63, 0x75,
	0x62, 0x65, 0x2e, 0x49, 0x6e, 0x64, 0x65, 0x78, 0x44, 0x61, 0x74, 0x61, 0x73, 0x65, 0x74, 0x73,
	0x52, 0x65, 0x73, 0x70, 0x6f, 0x6e, 0x73, 0x65, 0x22, 0x00, 0x12, 0x62, 0x0a, 0x13, 0x43, 0x6f,
	0x6e, 0x66, 0x69, 0x67, 0x43, 0x6f, 0x6e, 0x73, 0x6f, 0x6c, 0x69, 0x64, 0x61, 0x74, 0x69, 0x6f,
	0x6e, 0x12, 0x23, 0x2e, 0x67, 0x65, 0x6f, 0x63, 0x75, 0x62, 0x65, 0x2e, 0x43, 0x6f, 0x6e, 0x66,
	0x69, 0x67, 0x43, 0x6f, 0x6e, 0x73, 0x6f, 0x6c, 0x69, 0x64, 0x61, 0x74, 0x69, 0x6f, 0x6e, 0x52,
	0x65, 0x71, 0x75, 0x65, 0x73, 0x74, 0x1a, 0x24, 0x2e, 0x67, 0x65, 0x6f, 0x63, 0x75, 0x62, 0x65,
	0x2e, 0x43, 0x6f, 0x6e, 0x66, 0x69, 0x67, 0x43, 0x6f, 0x6e, 0x73, 0x6f, 0x6c, 0x69, 0x64, 0x61,
	0x74, 0x69, 0x6f, 0x6e, 0x52, 0x65, 0x73, 0x70, 0x6f, 0x6e, 0x73, 0x65, 0x22, 0x00, 0x12, 0x6b,
	0x0a, 0x16, 0x47, 0x65, 0x74, 0x43, 0x6f, 0x6e, 0x73, 0x6f, 0x6c, 0x69, 0x64, 0x61, 0x74, 0x69,
	0x6f, 0x6e, 0x50, 0x61, 0x72, 0x61, 0x6d, 0x73, 0x12, 0x26, 0x2e, 0x67, 0x65, 0x6f, 0x63, 0x75,
	0x62, 0x65, 0x2e, 0x47, 0x65, 0x74, 0x43, 0x6f, 0x6e, 0x73, 0x6f, 0x6c, 0x69, 0x64, 0x61, 0x74,
	0x69, 0x6f, 0x6e, 0x50, 0x61, 0x72, 0x61, 0x6d, 0x73, 0x52, 0x65, 0x71, 0x75, 0x65, 0x73, 0x74,
	0x1a, 0x27, 0x2e, 0x67, 0x65, 0x6f, 0x63, 0x75, 0x62, 0x65, 0x2e, 0x47, 0x65, 0x74, 0x43, 0x6f,
	0x6e, 0x73, 0x6f, 0x6c, 0x69, 0x64, 0x61, 0x74, 0x69, 0x6f, 0x6e, 0x50, 0x61, 0x72, 0x61, 0x6d,
	0x73, 0x52, 0x65, 0x73, 0x70, 0x6f, 0x6e, 0x73, 0x65, 0x22, 0x00, 0x12, 0x4a, 0x0a, 0x0b, 0x43,
	0x6f, 0x6e, 0x73, 0x6f, 0x6c, 0x69, 0x64, 0x61, 0x74, 0x65, 0x12, 0x1b, 0x2e, 0x67, 0x65, 0x6f,
	0x63, 0x75, 0x62, 0x65, 0x2e, 0x43, 0x6f, 0x6e, 0x73, 0x6f, 0x6c, 0x69, 0x64, 0x61, 0x74, 0x65,
	0x52, 0x65, 0x71, 0x75, 0x65, 0x73, 0x74, 0x1a, 0x1c, 0x2e, 0x67, 0x65, 0x6f, 0x63, 0x75, 0x62,
	0x65, 0x2e, 0x43, 0x6f, 0x6e, 0x73, 0x6f, 0x6c, 0x69, 0x64, 0x61, 0x74, 0x65, 0x52, 0x65, 0x73,
	0x70, 0x6f, 0x6e, 0x73, 0x65, 0x22, 0x00, 0x12, 0x41, 0x0a, 0x08, 0x4c, 0x69, 0x73, 0x74, 0x4a,
	0x6f, 0x62, 0x73, 0x12, 0x18, 0x2e, 0x67, 0x65, 0x6f, 0x63, 0x75, 0x62, 0x65, 0x2e, 0x4c, 0x69,
	0x73, 0x74, 0x4a, 0x6f, 0x62, 0x73, 0x52, 0x65, 0x71, 0x75, 0x65, 0x73, 0x74, 0x1a, 0x19, 0x2e,
	0x67, 0x65, 0x6f, 0x63, 0x75, 0x62, 0x65, 0x2e, 0x4c, 0x69, 0x73, 0x74, 0x4a, 0x6f, 0x62, 0x73,
	0x52, 0x65, 0x73, 0x70, 0x6f, 0x6e, 0x73, 0x65, 0x22, 0x00, 0x12, 0x3b, 0x0a, 0x06, 0x47, 0x65,
	0x74, 0x4a, 0x6f, 0x62, 0x12, 0x16, 0x2e, 0x67, 0x65, 0x6f, 0x63, 0x75, 0x62, 0x65, 0x2e, 0x47,
	0x65, 0x74, 0x4a, 0x6f, 0x62, 0x52, 0x65, 0x71, 0x75, 0x65, 0x73, 0x74, 0x1a, 0x17, 0x2e, 0x67,
	0x65, 0x6f, 0x63, 0x75, 0x62, 0x65, 0x2e, 0x47, 0x65, 0x74, 0x4a, 0x6f, 0x62, 0x52, 0x65, 0x73,
	0x70, 0x6f, 0x6e, 0x73, 0x65, 0x22, 0x00, 0x12, 0x44, 0x0a, 0x09, 0x43, 0x6c, 0x65, 0x61, 0x6e,
	0x4a, 0x6f, 0x62, 0x73, 0x12, 0x19, 0x2e, 0x67, 0x65, 0x6f, 0x63, 0x75, 0x62, 0x65, 0x2e, 0x43,
	0x6c, 0x65, 0x61, 0x6e, 0x4a, 0x6f, 0x62, 0x73, 0x52, 0x65, 0x71, 0x75, 0x65, 0x73, 0x74, 0x1a,
	0x1a, 0x2e, 0x67, 0x65, 0x6f, 0x63, 0x75, 0x62, 0x65, 0x2e, 0x43, 0x6c, 0x65, 0x61, 0x6e, 0x4a,
	0x6f, 0x62, 0x73, 0x52, 0x65, 0x73, 0x70, 0x6f, 0x6e, 0x73, 0x65, 0x22, 0x00, 0x12, 0x41, 0x0a,
	0x08, 0x52, 0x65, 0x74, 0x72, 0x79, 0x4a, 0x6f, 0x62, 0x12, 0x18, 0x2e, 0x67, 0x65, 0x6f, 0x63,
	0x75, 0x62, 0x65, 0x2e, 0x52, 0x65, 0x74, 0x72, 0x79, 0x4a, 0x6f, 0x62, 0x52, 0x65, 0x71, 0x75,
	0x65, 0x73, 0x74, 0x1a, 0x19, 0x2e, 0x67, 0x65, 0x6f, 0x63, 0x75, 0x62, 0x65, 0x2e, 0x52, 0x65,
	0x74, 0x72, 0x79, 0x4a, 0x6f, 0x62, 0x52, 0x65, 0x73, 0x70, 0x6f, 0x6e, 0x73, 0x65, 0x22, 0x00,
	0x12, 0x44, 0x0a, 0x09, 0x43, 0x61, 0x6e, 0x63, 0x65, 0x6c, 0x4a, 0x6f, 0x62, 0x12, 0x19, 0x2e,
	0x67, 0x65, 0x6f, 0x63, 0x75, 0x62, 0x65, 0x2e, 0x43, 0x61, 0x6e, 0x63, 0x65, 0x6c, 0x4a, 0x6f,
	0x62, 0x52, 0x65, 0x71, 0x75, 0x65, 0x73, 0x74, 0x1a, 0x1a, 0x2e, 0x67, 0x65, 0x6f, 0x63, 0x75,
	0x62, 0x65, 0x2e, 0x43, 0x61, 0x6e, 0x63, 0x65, 0x6c, 0x4a, 0x6f, 0x62, 0x52, 0x65, 0x73, 0x70,
	0x6f, 0x6e, 0x73, 0x65, 0x22, 0x00, 0x12, 0x4a, 0x0a, 0x0b, 0x43, 0x6f, 0x6e, 0x74, 0x69, 0x6e,
	0x75, 0x65, 0x4a, 0x6f, 0x62, 0x12, 0x1b, 0x2e, 0x67, 0x65, 0x6f, 0x63, 0x75, 0x62, 0x65, 0x2e,
	0x43, 0x6f, 0x6e, 0x74, 0x69, 0x6e, 0x75, 0x65, 0x4a, 0x6f, 0x62, 0x52, 0x65, 0x71, 0x75, 0x65,
	0x73, 0x74, 0x1a, 0x1c, 0x2e, 0x67, 0x65, 0x6f, 0x63, 0x75, 0x62, 0x65, 0x2e, 0x43, 0x6f, 0x6e,
	0x74, 0x69, 0x6e, 0x75, 0x65, 0x4a, 0x6f, 0x62, 0x52, 0x65, 0x73, 0x70, 0x6f, 0x6e, 0x73, 0x65,
	0x22, 0x00, 0x12, 0x40, 0x0a, 0x07, 0x47, 0x65, 0x74, 0x43, 0x75, 0x62, 0x65, 0x12, 0x17, 0x2e,
	0x67, 0x65, 0x6f, 0x63, 0x75, 0x62, 0x65, 0x2e, 0x47, 0x65, 0x74, 0x43, 0x75, 0x62, 0x65, 0x52,
	0x65, 0x71, 0x75, 0x65, 0x73, 0x74, 0x1a, 0x18, 0x2e, 0x67, 0x65, 0x6f, 0x63, 0x75, 0x62, 0x65,
	0x2e, 0x47, 0x65, 0x74, 0x43, 0x75, 0x62, 0x65, 0x52, 0x65, 0x73, 0x70, 0x6f, 0x6e, 0x73, 0x65,
	0x22, 0x00, 0x30, 0x01, 0x12, 0x85, 0x01, 0x0a, 0x0a, 0x47, 0x65, 0x74, 0x58, 0x59, 0x5a, 0x54,
	0x69, 0x6c, 0x65, 0x12, 0x17, 0x2e, 0x67, 0x65, 0x6f, 0x63, 0x75, 0x62, 0x65, 0x2e, 0x47, 0x65,
	0x74, 0x54, 0x69, 0x6c, 0x65, 0x52, 0x65, 0x71, 0x75, 0x65, 0x73, 0x74, 0x1a, 0x18, 0x2e, 0x67,
	0x65, 0x6f, 0x63, 0x75, 0x62, 0x65, 0x2e, 0x47, 0x65, 0x74, 0x54, 0x69, 0x6c, 0x65, 0x52, 0x65,
	0x73, 0x70, 0x6f, 0x6e, 0x73, 0x65, 0x22, 0x44, 0x82, 0xd3, 0xe4, 0x93, 0x02, 0x3e, 0x12, 0x30,
	0x2f, 0x76, 0x31, 0x2f, 0x63, 0x61, 0x74, 0x61, 0x6c, 0x6f, 0x67, 0x2f, 0x6d, 0x6f, 0x73, 0x61,
	0x69, 0x63, 0x2f, 0x7b, 0x69, 0x6e, 0x73, 0x74, 0x61, 0x6e, 0x63, 0x65, 0x5f, 0x69, 0x64, 0x7d,
	0x2f, 0x7b, 0x78, 0x7d, 0x2f, 0x7b, 0x79, 0x7d, 0x2f, 0x7b, 0x7a, 0x7d, 0x2f, 0x70, 0x6e, 0x67,
	0x62, 0x0a, 0x69, 0x6d, 0x61, 0x67, 0x65, 0x2e, 0x64, 0x61, 0x74, 0x61, 0x12, 0x4d, 0x0a, 0x0c,
	0x43, 0x72, 0x65, 0x61, 0x74, 0x65, 0x4c, 0x61, 0x79, 0x6f, 0x75, 0x74, 0x12, 0x1c, 0x2e, 0x67,
	0x65, 0x6f, 0x63, 0x75, 0x62, 0x65, 0x2e, 0x43, 0x72, 0x65, 0x61, 0x74, 0x65, 0x4c, 0x61, 0x79,
	0x6f, 0x75, 0x74, 0x52, 0x65, 0x71, 0x75, 0x65, 0x73, 0x74, 0x1a, 0x1d, 0x2e, 0x67, 0x65, 0x6f,
	0x63, 0x75, 0x62, 0x65, 0x2e, 0x43, 0x72, 0x65, 0x61, 0x74, 0x65, 0x4c, 0x61, 0x79, 0x6f, 0x75,
	0x74, 0x52, 0x65, 0x73, 0x70, 0x6f, 0x6e, 0x73, 0x65, 0x22, 0x00, 0x12, 0x4d, 0x0a, 0x0c, 0x44,
	0x65, 0x6c, 0x65, 0x74, 0x65, 0x4c, 0x61, 0x79, 0x6f, 0x75, 0x74, 0x12, 0x1c, 0x2e, 0x67, 0x65,
	0x6f, 0x63, 0x75, 0x62, 0x65, 0x2e, 0x44, 0x65, 0x6c, 0x65, 0x74, 0x65, 0x4c, 0x61, 0x79, 0x6f,
	0x75, 0x74, 0x52, 0x65, 0x71, 0x75, 0x65, 0x73, 0x74, 0x1a, 0x1d, 0x2e, 0x67, 0x65, 0x6f, 0x63,
	0x75, 0x62, 0x65, 0x2e, 0x44, 0x65, 0x6c, 0x65, 0x74, 0x65, 0x4c, 0x61, 0x79, 0x6f, 0x75, 0x74,
	0x52, 0x65, 0x73, 0x70, 0x6f, 0x6e, 0x73, 0x65, 0x22, 0x00, 0x12, 0x4a, 0x0a, 0x0b, 0x4c, 0x69,
	0x73, 0x74, 0x4c, 0x61, 0x79, 0x6f, 0x75, 0x74, 0x73, 0x12, 0x1b, 0x2e, 0x67, 0x65, 0x6f, 0x63,
	0x75, 0x62, 0x65, 0x2e, 0x4c, 0x69, 0x73, 0x74, 0x4c, 0x61, 0x79, 0x6f, 0x75, 0x74, 0x73, 0x52,
	0x65, 0x71, 0x75, 0x65, 0x73, 0x74, 0x1a, 0x1c, 0x2e, 0x67, 0x65, 0x6f, 0x63, 0x75, 0x62, 0x65,
	0x2e, 0x4c, 0x69, 0x73, 0x74, 0x4c, 0x61, 0x79, 0x6f, 0x75, 0x74, 0x73, 0x52, 0x65, 0x73, 0x70,
	0x6f, 0x6e, 0x73, 0x65, 0x22, 0x00, 0x12, 0x40, 0x0a, 0x07, 0x54, 0x69, 0x6c, 0x65, 0x41, 0x4f,
	0x49, 0x12, 0x17, 0x2e, 0x67, 0x65, 0x6f, 0x63, 0x75, 0x62, 0x65, 0x2e, 0x54, 0x69, 0x6c, 0x65,
	0x41, 0x4f, 0x49, 0x52, 0x65, 0x71, 0x75, 0x65, 0x73, 0x74, 0x1a, 0x18, 0x2e, 0x67, 0x65, 0x6f,
	0x63, 0x75, 0x62, 0x65, 0x2e, 0x54, 0x69, 0x6c, 0x65, 0x41, 0x4f, 0x49, 0x52, 0x65, 0x73, 0x70,
	0x6f, 0x6e, 0x73, 0x65, 0x22, 0x00, 0x30, 0x01, 0x12, 0x47, 0x0a, 0x0a, 0x43, 0x72, 0x65, 0x61,
	0x74, 0x65, 0x47, 0x72, 0x69, 0x64, 0x12, 0x1a, 0x2e, 0x67, 0x65, 0x6f, 0x63, 0x75, 0x62, 0x65,
	0x2e, 0x43, 0x72, 0x65, 0x61, 0x74, 0x65, 0x47, 0x72, 0x69, 0x64, 0x52, 0x65, 0x71, 0x75, 0x65,
	0x73, 0x74, 0x1a, 0x1b, 0x2e, 0x67, 0x65, 0x6f, 0x63, 0x75, 0x62, 0x65, 0x2e, 0x43, 0x72, 0x65,
	0x61, 0x74, 0x65, 0x47, 0x72, 0x69, 0x64, 0x52, 0x65, 0x73, 0x70, 0x6f, 0x6e, 0x73, 0x65, 0x22,
	0x00, 0x12, 0x47, 0x0a, 0x0a, 0x44, 0x65, 0x6c, 0x65, 0x74, 0x65, 0x47, 0x72, 0x69, 0x64, 0x12,
	0x1a, 0x2e, 0x67, 0x65, 0x6f, 0x63, 0x75, 0x62, 0x65, 0x2e, 0x44, 0x65, 0x6c, 0x65, 0x74, 0x65,
	0x47, 0x72, 0x69, 0x64, 0x52, 0x65, 0x71, 0x75, 0x65, 0x73, 0x74, 0x1a, 0x1b, 0x2e, 0x67, 0x65,
	0x6f, 0x63, 0x75, 0x62, 0x65, 0x2e, 0x44, 0x65, 0x6c, 0x65, 0x74, 0x65, 0x47, 0x72, 0x69, 0x64,
	0x52, 0x65, 0x73, 0x70, 0x6f, 0x6e, 0x73, 0x65, 0x22, 0x00, 0x12, 0x44, 0x0a, 0x09, 0x4c, 0x69,
	0x73, 0x74, 0x47, 0x72, 0x69, 0x64, 0x73, 0x12, 0x19, 0x2e, 0x67, 0x65, 0x6f, 0x63, 0x75, 0x62,
	0x65, 0x2e, 0x4c, 0x69, 0x73, 0x74, 0x47, 0x72, 0x69, 0x64, 0x73, 0x52, 0x65, 0x71, 0x75, 0x65,
	0x73, 0x74, 0x1a, 0x1a, 0x2e, 0x67, 0x65, 0x6f, 0x63, 0x75, 0x62, 0x65, 0x2e, 0x4c, 0x69, 0x73,
	0x74, 0x47, 0x72, 0x69, 0x64, 0x73, 0x52, 0x65, 0x73, 0x70, 0x6f, 0x6e, 0x73, 0x65, 0x22, 0x00,
	0x12, 0x44, 0x0a, 0x07, 0x56, 0x65, 0x72, 0x73, 0x69, 0x6f, 0x6e, 0x12, 0x1a, 0x2e, 0x67, 0x65,
	0x6f, 0x63, 0x75, 0x62, 0x65, 0x2e, 0x47, 0x65, 0x74, 0x56, 0x65, 0x72, 0x73, 0x69, 0x6f, 0x6e,
	0x52, 0x65, 0x71, 0x75, 0x65, 0x73, 0x74, 0x1a, 0x1b, 0x2e, 0x67, 0x65, 0x6f, 0x63, 0x75, 0x62,
	0x65, 0x2e, 0x47, 0x65, 0x74, 0x56, 0x65, 0x72, 0x73, 0x69, 0x6f, 0x6e, 0x52, 0x65, 0x73, 0x70,
	0x6f, 0x6e, 0x73, 0x65, 0x22, 0x00, 0x42, 0x0e, 0x5a, 0x0c, 0x2e, 0x2f, 0x70, 0x62, 0x3b, 0x67,
	0x65, 0x6f, 0x63, 0x75, 0x62, 0x65, 0x62, 0x06, 0x70, 0x72, 0x6f, 0x74, 0x6f, 0x33,
}

var (
	file_pb_geocube_proto_rawDescOnce sync.Once
	file_pb_geocube_proto_rawDescData = file_pb_geocube_proto_rawDesc
)

func file_pb_geocube_proto_rawDescGZIP() []byte {
	file_pb_geocube_proto_rawDescOnce.Do(func() {
		file_pb_geocube_proto_rawDescData = protoimpl.X.CompressGZIP(file_pb_geocube_proto_rawDescData)
	})
	return file_pb_geocube_proto_rawDescData
}

var file_pb_geocube_proto_msgTypes = make([]protoimpl.MessageInfo, 2)
var file_pb_geocube_proto_goTypes = []interface{}{
	(*GetVersionRequest)(nil),              // 0: geocube.GetVersionRequest
	(*GetVersionResponse)(nil),             // 1: geocube.GetVersionResponse
	(*ListRecordsRequest)(nil),             // 2: geocube.ListRecordsRequest
	(*CreateRecordsRequest)(nil),           // 3: geocube.CreateRecordsRequest
	(*DeleteRecordsRequest)(nil),           // 4: geocube.DeleteRecordsRequest
	(*AddRecordsTagsRequest)(nil),          // 5: geocube.AddRecordsTagsRequest
	(*RemoveRecordsTagsRequest)(nil),       // 6: geocube.RemoveRecordsTagsRequest
	(*CreateAOIRequest)(nil),               // 7: geocube.CreateAOIRequest
	(*GetAOIRequest)(nil),                  // 8: geocube.GetAOIRequest
	(*CreateVariableRequest)(nil),          // 9: geocube.CreateVariableRequest
	(*InstantiateVariableRequest)(nil),     // 10: geocube.InstantiateVariableRequest
	(*GetVariableRequest)(nil),             // 11: geocube.GetVariableRequest
	(*ListVariablesRequest)(nil),           // 12: geocube.ListVariablesRequest
	(*UpdateVariableRequest)(nil),          // 13: geocube.UpdateVariableRequest
	(*UpdateInstanceRequest)(nil),          // 14: geocube.UpdateInstanceRequest
	(*DeleteVariableRequest)(nil),          // 15: geocube.DeleteVariableRequest
	(*DeleteInstanceRequest)(nil),          // 16: geocube.DeleteInstanceRequest
	(*CreatePaletteRequest)(nil),           // 17: geocube.CreatePaletteRequest
	(*IndexDatasetsRequest)(nil),           // 18: geocube.IndexDatasetsRequest
	(*ConfigConsolidationRequest)(nil),     // 19: geocube.ConfigConsolidationRequest
	(*GetConsolidationParamsRequest)(nil),  // 20: geocube.GetConsolidationParamsRequest
	(*ConsolidateRequest)(nil),             // 21: geocube.ConsolidateRequest
	(*ListJobsRequest)(nil),                // 22: geocube.ListJobsRequest
	(*GetJobRequest)(nil),                  // 23: geocube.GetJobRequest
	(*CleanJobsRequest)(nil),               // 24: geocube.CleanJobsRequest
	(*RetryJobRequest)(nil),                // 25: geocube.RetryJobRequest
	(*CancelJobRequest)(nil),               // 26: geocube.CancelJobRequest
	(*ContinueJobRequest)(nil),             // 27: geocube.ContinueJobRequest
	(*GetCubeRequest)(nil),                 // 28: geocube.GetCubeRequest
	(*GetTileRequest)(nil),                 // 29: geocube.GetTileRequest
	(*CreateLayoutRequest)(nil),            // 30: geocube.CreateLayoutRequest
	(*DeleteLayoutRequest)(nil),            // 31: geocube.DeleteLayoutRequest
	(*ListLayoutsRequest)(nil),             // 32: geocube.ListLayoutsRequest
	(*TileAOIRequest)(nil),                 // 33: geocube.TileAOIRequest
	(*CreateGridRequest)(nil),              // 34: geocube.CreateGridRequest
	(*DeleteGridRequest)(nil),              // 35: geocube.DeleteGridRequest
	(*ListGridsRequest)(nil),               // 36: geocube.ListGridsRequest
	(*ListRecordsResponseItem)(nil),        // 37: geocube.ListRecordsResponseItem
	(*CreateRecordsResponse)(nil),          // 38: geocube.CreateRecordsResponse
	(*DeleteRecordsResponse)(nil),          // 39: geocube.DeleteRecordsResponse
	(*AddRecordsTagsResponse)(nil),         // 40: geocube.AddRecordsTagsResponse
	(*RemoveRecordsTagsResponse)(nil),      // 41: geocube.RemoveRecordsTagsResponse
	(*CreateAOIResponse)(nil),              // 42: geocube.CreateAOIResponse
	(*GetAOIResponse)(nil),                 // 43: geocube.GetAOIResponse
	(*CreateVariableResponse)(nil),         // 44: geocube.CreateVariableResponse
	(*InstantiateVariableResponse)(nil),    // 45: geocube.InstantiateVariableResponse
	(*GetVariableResponse)(nil),            // 46: geocube.GetVariableResponse
	(*ListVariablesResponseItem)(nil),      // 47: geocube.ListVariablesResponseItem
	(*UpdateVariableResponse)(nil),         // 48: geocube.UpdateVariableResponse
	(*UpdateInstanceResponse)(nil),         // 49: geocube.UpdateInstanceResponse
	(*DeleteVariableResponse)(nil),         // 50: geocube.DeleteVariableResponse
	(*DeleteInstanceResponse)(nil),         // 51: geocube.DeleteInstanceResponse
	(*CreatePaletteResponse)(nil),          // 52: geocube.CreatePaletteResponse
	(*IndexDatasetsResponse)(nil),          // 53: geocube.IndexDatasetsResponse
	(*ConfigConsolidationResponse)(nil),    // 54: geocube.ConfigConsolidationResponse
	(*GetConsolidationParamsResponse)(nil), // 55: geocube.GetConsolidationParamsResponse
	(*ConsolidateResponse)(nil),            // 56: geocube.ConsolidateResponse
	(*ListJobsResponse)(nil),               // 57: geocube.ListJobsResponse
	(*GetJobResponse)(nil),                 // 58: geocube.GetJobResponse
	(*CleanJobsResponse)(nil),              // 59: geocube.CleanJobsResponse
	(*RetryJobResponse)(nil),               // 60: geocube.RetryJobResponse
	(*CancelJobResponse)(nil),              // 61: geocube.CancelJobResponse
	(*ContinueJobResponse)(nil),            // 62: geocube.ContinueJobResponse
	(*GetCubeResponse)(nil),                // 63: geocube.GetCubeResponse
	(*GetTileResponse)(nil),                // 64: geocube.GetTileResponse
	(*CreateLayoutResponse)(nil),           // 65: geocube.CreateLayoutResponse
	(*DeleteLayoutResponse)(nil),           // 66: geocube.DeleteLayoutResponse
	(*ListLayoutsResponse)(nil),            // 67: geocube.ListLayoutsResponse
	(*TileAOIResponse)(nil),                // 68: geocube.TileAOIResponse
	(*CreateGridResponse)(nil),             // 69: geocube.CreateGridResponse
	(*DeleteGridResponse)(nil),             // 70: geocube.DeleteGridResponse
	(*ListGridsResponse)(nil),              // 71: geocube.ListGridsResponse
}
var file_pb_geocube_proto_depIdxs = []int32{
	2,  // 0: geocube.Geocube.ListRecords:input_type -> geocube.ListRecordsRequest
	3,  // 1: geocube.Geocube.CreateRecords:input_type -> geocube.CreateRecordsRequest
	4,  // 2: geocube.Geocube.DeleteRecords:input_type -> geocube.DeleteRecordsRequest
	5,  // 3: geocube.Geocube.AddRecordsTags:input_type -> geocube.AddRecordsTagsRequest
	6,  // 4: geocube.Geocube.RemoveRecordsTags:input_type -> geocube.RemoveRecordsTagsRequest
	7,  // 5: geocube.Geocube.CreateAOI:input_type -> geocube.CreateAOIRequest
	8,  // 6: geocube.Geocube.GetAOI:input_type -> geocube.GetAOIRequest
	9,  // 7: geocube.Geocube.CreateVariable:input_type -> geocube.CreateVariableRequest
	10, // 8: geocube.Geocube.InstantiateVariable:input_type -> geocube.InstantiateVariableRequest
	11, // 9: geocube.Geocube.GetVariable:input_type -> geocube.GetVariableRequest
	12, // 10: geocube.Geocube.ListVariables:input_type -> geocube.ListVariablesRequest
	13, // 11: geocube.Geocube.UpdateVariable:input_type -> geocube.UpdateVariableRequest
	14, // 12: geocube.Geocube.UpdateInstance:input_type -> geocube.UpdateInstanceRequest
	15, // 13: geocube.Geocube.DeleteVariable:input_type -> geocube.DeleteVariableRequest
	16, // 14: geocube.Geocube.DeleteInstance:input_type -> geocube.DeleteInstanceRequest
	17, // 15: geocube.Geocube.CreatePalette:input_type -> geocube.CreatePaletteRequest
	18, // 16: geocube.Geocube.IndexDatasets:input_type -> geocube.IndexDatasetsRequest
	19, // 17: geocube.Geocube.ConfigConsolidation:input_type -> geocube.ConfigConsolidationRequest
	20, // 18: geocube.Geocube.GetConsolidationParams:input_type -> geocube.GetConsolidationParamsRequest
	21, // 19: geocube.Geocube.Consolidate:input_type -> geocube.ConsolidateRequest
	22, // 20: geocube.Geocube.ListJobs:input_type -> geocube.ListJobsRequest
	23, // 21: geocube.Geocube.GetJob:input_type -> geocube.GetJobRequest
	24, // 22: geocube.Geocube.CleanJobs:input_type -> geocube.CleanJobsRequest
	25, // 23: geocube.Geocube.RetryJob:input_type -> geocube.RetryJobRequest
	26, // 24: geocube.Geocube.CancelJob:input_type -> geocube.CancelJobRequest
	27, // 25: geocube.Geocube.ContinueJob:input_type -> geocube.ContinueJobRequest
	28, // 26: geocube.Geocube.GetCube:input_type -> geocube.GetCubeRequest
	29, // 27: geocube.Geocube.GetXYZTile:input_type -> geocube.GetTileRequest
	30, // 28: geocube.Geocube.CreateLayout:input_type -> geocube.CreateLayoutRequest
	31, // 29: geocube.Geocube.DeleteLayout:input_type -> geocube.DeleteLayoutRequest
	32, // 30: geocube.Geocube.ListLayouts:input_type -> geocube.ListLayoutsRequest
	33, // 31: geocube.Geocube.TileAOI:input_type -> geocube.TileAOIRequest
	34, // 32: geocube.Geocube.CreateGrid:input_type -> geocube.CreateGridRequest
	35, // 33: geocube.Geocube.DeleteGrid:input_type -> geocube.DeleteGridRequest
	36, // 34: geocube.Geocube.ListGrids:input_type -> geocube.ListGridsRequest
	0,  // 35: geocube.Geocube.Version:input_type -> geocube.GetVersionRequest
	37, // 36: geocube.Geocube.ListRecords:output_type -> geocube.ListRecordsResponseItem
	38, // 37: geocube.Geocube.CreateRecords:output_type -> geocube.CreateRecordsResponse
	39, // 38: geocube.Geocube.DeleteRecords:output_type -> geocube.DeleteRecordsResponse
	40, // 39: geocube.Geocube.AddRecordsTags:output_type -> geocube.AddRecordsTagsResponse
	41, // 40: geocube.Geocube.RemoveRecordsTags:output_type -> geocube.RemoveRecordsTagsResponse
	42, // 41: geocube.Geocube.CreateAOI:output_type -> geocube.CreateAOIResponse
	43, // 42: geocube.Geocube.GetAOI:output_type -> geocube.GetAOIResponse
	44, // 43: geocube.Geocube.CreateVariable:output_type -> geocube.CreateVariableResponse
	45, // 44: geocube.Geocube.InstantiateVariable:output_type -> geocube.InstantiateVariableResponse
	46, // 45: geocube.Geocube.GetVariable:output_type -> geocube.GetVariableResponse
	47, // 46: geocube.Geocube.ListVariables:output_type -> geocube.ListVariablesResponseItem
	48, // 47: geocube.Geocube.UpdateVariable:output_type -> geocube.UpdateVariableResponse
	49, // 48: geocube.Geocube.UpdateInstance:output_type -> geocube.UpdateInstanceResponse
	50, // 49: geocube.Geocube.DeleteVariable:output_type -> geocube.DeleteVariableResponse
	51, // 50: geocube.Geocube.DeleteInstance:output_type -> geocube.DeleteInstanceResponse
	52, // 51: geocube.Geocube.CreatePalette:output_type -> geocube.CreatePaletteResponse
	53, // 52: geocube.Geocube.IndexDatasets:output_type -> geocube.IndexDatasetsResponse
	54, // 53: geocube.Geocube.ConfigConsolidation:output_type -> geocube.ConfigConsolidationResponse
	55, // 54: geocube.Geocube.GetConsolidationParams:output_type -> geocube.GetConsolidationParamsResponse
	56, // 55: geocube.Geocube.Consolidate:output_type -> geocube.ConsolidateResponse
	57, // 56: geocube.Geocube.ListJobs:output_type -> geocube.ListJobsResponse
	58, // 57: geocube.Geocube.GetJob:output_type -> geocube.GetJobResponse
	59, // 58: geocube.Geocube.CleanJobs:output_type -> geocube.CleanJobsResponse
	60, // 59: geocube.Geocube.RetryJob:output_type -> geocube.RetryJobResponse
	61, // 60: geocube.Geocube.CancelJob:output_type -> geocube.CancelJobResponse
	62, // 61: geocube.Geocube.ContinueJob:output_type -> geocube.ContinueJobResponse
	63, // 62: geocube.Geocube.GetCube:output_type -> geocube.GetCubeResponse
	64, // 63: geocube.Geocube.GetXYZTile:output_type -> geocube.GetTileResponse
	65, // 64: geocube.Geocube.CreateLayout:output_type -> geocube.CreateLayoutResponse
	66, // 65: geocube.Geocube.DeleteLayout:output_type -> geocube.DeleteLayoutResponse
	67, // 66: geocube.Geocube.ListLayouts:output_type -> geocube.ListLayoutsResponse
	68, // 67: geocube.Geocube.TileAOI:output_type -> geocube.TileAOIResponse
	69, // 68: geocube.Geocube.CreateGrid:output_type -> geocube.CreateGridResponse
	70, // 69: geocube.Geocube.DeleteGrid:output_type -> geocube.DeleteGridResponse
	71, // 70: geocube.Geocube.ListGrids:output_type -> geocube.ListGridsResponse
	1,  // 71: geocube.Geocube.Version:output_type -> geocube.GetVersionResponse
	36, // [36:72] is the sub-list for method output_type
	0,  // [0:36] is the sub-list for method input_type
	0,  // [0:0] is the sub-list for extension type_name
	0,  // [0:0] is the sub-list for extension extendee
	0,  // [0:0] is the sub-list for field type_name
}

func init() { file_pb_geocube_proto_init() }
func file_pb_geocube_proto_init() {
	if File_pb_geocube_proto != nil {
		return
	}
	file_pb_catalog_proto_init()
	file_pb_records_proto_init()
	file_pb_variables_proto_init()
	file_pb_layouts_proto_init()
	file_pb_operations_proto_init()
	if !protoimpl.UnsafeEnabled {
		file_pb_geocube_proto_msgTypes[0].Exporter = func(v interface{}, i int) interface{} {
			switch v := v.(*GetVersionRequest); i {
			case 0:
				return &v.state
			case 1:
				return &v.sizeCache
			case 2:
				return &v.unknownFields
			default:
				return nil
			}
		}
		file_pb_geocube_proto_msgTypes[1].Exporter = func(v interface{}, i int) interface{} {
			switch v := v.(*GetVersionResponse); i {
			case 0:
				return &v.state
			case 1:
				return &v.sizeCache
			case 2:
				return &v.unknownFields
			default:
				return nil
			}
		}
	}
	type x struct{}
	out := protoimpl.TypeBuilder{
		File: protoimpl.DescBuilder{
			GoPackagePath: reflect.TypeOf(x{}).PkgPath(),
			RawDescriptor: file_pb_geocube_proto_rawDesc,
			NumEnums:      0,
			NumMessages:   2,
			NumExtensions: 0,
			NumServices:   1,
		},
		GoTypes:           file_pb_geocube_proto_goTypes,
		DependencyIndexes: file_pb_geocube_proto_depIdxs,
		MessageInfos:      file_pb_geocube_proto_msgTypes,
	}.Build()
	File_pb_geocube_proto = out.File
	file_pb_geocube_proto_rawDesc = nil
	file_pb_geocube_proto_goTypes = nil
	file_pb_geocube_proto_depIdxs = nil
}

// Reference imports to suppress errors if they are not otherwise used.
var _ context.Context
var _ grpc.ClientConnInterface

// This is a compile-time assertion to ensure that this generated file
// is compatible with the grpc package it is being compiled against.
const _ = grpc.SupportPackageIsVersion6

// GeocubeClient is the client API for Geocube service.
//
// For semantics around ctx use and closing/ending streaming RPCs, please refer to https://godoc.org/google.golang.org/grpc#ClientConn.NewStream.
type GeocubeClient interface {
	// @exclude Records
	ListRecords(ctx context.Context, in *ListRecordsRequest, opts ...grpc.CallOption) (Geocube_ListRecordsClient, error)
	CreateRecords(ctx context.Context, in *CreateRecordsRequest, opts ...grpc.CallOption) (*CreateRecordsResponse, error)
	DeleteRecords(ctx context.Context, in *DeleteRecordsRequest, opts ...grpc.CallOption) (*DeleteRecordsResponse, error)
	AddRecordsTags(ctx context.Context, in *AddRecordsTagsRequest, opts ...grpc.CallOption) (*AddRecordsTagsResponse, error)
	RemoveRecordsTags(ctx context.Context, in *RemoveRecordsTagsRequest, opts ...grpc.CallOption) (*RemoveRecordsTagsResponse, error)
	CreateAOI(ctx context.Context, in *CreateAOIRequest, opts ...grpc.CallOption) (*CreateAOIResponse, error)
	GetAOI(ctx context.Context, in *GetAOIRequest, opts ...grpc.CallOption) (*GetAOIResponse, error)
	// @exclude Variables
	CreateVariable(ctx context.Context, in *CreateVariableRequest, opts ...grpc.CallOption) (*CreateVariableResponse, error)
	InstantiateVariable(ctx context.Context, in *InstantiateVariableRequest, opts ...grpc.CallOption) (*InstantiateVariableResponse, error)
	GetVariable(ctx context.Context, in *GetVariableRequest, opts ...grpc.CallOption) (*GetVariableResponse, error)
	ListVariables(ctx context.Context, in *ListVariablesRequest, opts ...grpc.CallOption) (Geocube_ListVariablesClient, error)
	UpdateVariable(ctx context.Context, in *UpdateVariableRequest, opts ...grpc.CallOption) (*UpdateVariableResponse, error)
	UpdateInstance(ctx context.Context, in *UpdateInstanceRequest, opts ...grpc.CallOption) (*UpdateInstanceResponse, error)
	DeleteVariable(ctx context.Context, in *DeleteVariableRequest, opts ...grpc.CallOption) (*DeleteVariableResponse, error)
	DeleteInstance(ctx context.Context, in *DeleteInstanceRequest, opts ...grpc.CallOption) (*DeleteInstanceResponse, error)
	CreatePalette(ctx context.Context, in *CreatePaletteRequest, opts ...grpc.CallOption) (*CreatePaletteResponse, error)
	// @exclude Operations
	IndexDatasets(ctx context.Context, in *IndexDatasetsRequest, opts ...grpc.CallOption) (*IndexDatasetsResponse, error)
	ConfigConsolidation(ctx context.Context, in *ConfigConsolidationRequest, opts ...grpc.CallOption) (*ConfigConsolidationResponse, error)
	GetConsolidationParams(ctx context.Context, in *GetConsolidationParamsRequest, opts ...grpc.CallOption) (*GetConsolidationParamsResponse, error)
	Consolidate(ctx context.Context, in *ConsolidateRequest, opts ...grpc.CallOption) (*ConsolidateResponse, error)
	ListJobs(ctx context.Context, in *ListJobsRequest, opts ...grpc.CallOption) (*ListJobsResponse, error)
	GetJob(ctx context.Context, in *GetJobRequest, opts ...grpc.CallOption) (*GetJobResponse, error)
	CleanJobs(ctx context.Context, in *CleanJobsRequest, opts ...grpc.CallOption) (*CleanJobsResponse, error)
	RetryJob(ctx context.Context, in *RetryJobRequest, opts ...grpc.CallOption) (*RetryJobResponse, error)
	CancelJob(ctx context.Context, in *CancelJobRequest, opts ...grpc.CallOption) (*CancelJobResponse, error)
	ContinueJob(ctx context.Context, in *ContinueJobRequest, opts ...grpc.CallOption) (*ContinueJobResponse, error)
	// @exclude Catalog
	GetCube(ctx context.Context, in *GetCubeRequest, opts ...grpc.CallOption) (Geocube_GetCubeClient, error)
	GetXYZTile(ctx context.Context, in *GetTileRequest, opts ...grpc.CallOption) (*GetTileResponse, error)
	// @exclude Layout
	CreateLayout(ctx context.Context, in *CreateLayoutRequest, opts ...grpc.CallOption) (*CreateLayoutResponse, error)
	DeleteLayout(ctx context.Context, in *DeleteLayoutRequest, opts ...grpc.CallOption) (*DeleteLayoutResponse, error)
	ListLayouts(ctx context.Context, in *ListLayoutsRequest, opts ...grpc.CallOption) (*ListLayoutsResponse, error)
	TileAOI(ctx context.Context, in *TileAOIRequest, opts ...grpc.CallOption) (Geocube_TileAOIClient, error)
	// @exclude Grid
	CreateGrid(ctx context.Context, in *CreateGridRequest, opts ...grpc.CallOption) (*CreateGridResponse, error)
	DeleteGrid(ctx context.Context, in *DeleteGridRequest, opts ...grpc.CallOption) (*DeleteGridResponse, error)
	ListGrids(ctx context.Context, in *ListGridsRequest, opts ...grpc.CallOption) (*ListGridsResponse, error)
	// @exclude Version
	Version(ctx context.Context, in *GetVersionRequest, opts ...grpc.CallOption) (*GetVersionResponse, error)
}

type geocubeClient struct {
	cc grpc.ClientConnInterface
}

func NewGeocubeClient(cc grpc.ClientConnInterface) GeocubeClient {
	return &geocubeClient{cc}
}

func (c *geocubeClient) ListRecords(ctx context.Context, in *ListRecordsRequest, opts ...grpc.CallOption) (Geocube_ListRecordsClient, error) {
	stream, err := c.cc.NewStream(ctx, &_Geocube_serviceDesc.Streams[0], "/geocube.Geocube/ListRecords", opts...)
	if err != nil {
		return nil, err
	}
	x := &geocubeListRecordsClient{stream}
	if err := x.ClientStream.SendMsg(in); err != nil {
		return nil, err
	}
	if err := x.ClientStream.CloseSend(); err != nil {
		return nil, err
	}
	return x, nil
}

type Geocube_ListRecordsClient interface {
	Recv() (*ListRecordsResponseItem, error)
	grpc.ClientStream
}

type geocubeListRecordsClient struct {
	grpc.ClientStream
}

func (x *geocubeListRecordsClient) Recv() (*ListRecordsResponseItem, error) {
	m := new(ListRecordsResponseItem)
	if err := x.ClientStream.RecvMsg(m); err != nil {
		return nil, err
	}
	return m, nil
}

func (c *geocubeClient) CreateRecords(ctx context.Context, in *CreateRecordsRequest, opts ...grpc.CallOption) (*CreateRecordsResponse, error) {
	out := new(CreateRecordsResponse)
	err := c.cc.Invoke(ctx, "/geocube.Geocube/CreateRecords", in, out, opts...)
	if err != nil {
		return nil, err
	}
	return out, nil
}

func (c *geocubeClient) DeleteRecords(ctx context.Context, in *DeleteRecordsRequest, opts ...grpc.CallOption) (*DeleteRecordsResponse, error) {
	out := new(DeleteRecordsResponse)
	err := c.cc.Invoke(ctx, "/geocube.Geocube/DeleteRecords", in, out, opts...)
	if err != nil {
		return nil, err
	}
	return out, nil
}

func (c *geocubeClient) AddRecordsTags(ctx context.Context, in *AddRecordsTagsRequest, opts ...grpc.CallOption) (*AddRecordsTagsResponse, error) {
	out := new(AddRecordsTagsResponse)
	err := c.cc.Invoke(ctx, "/geocube.Geocube/AddRecordsTags", in, out, opts...)
	if err != nil {
		return nil, err
	}
	return out, nil
}

func (c *geocubeClient) RemoveRecordsTags(ctx context.Context, in *RemoveRecordsTagsRequest, opts ...grpc.CallOption) (*RemoveRecordsTagsResponse, error) {
	out := new(RemoveRecordsTagsResponse)
	err := c.cc.Invoke(ctx, "/geocube.Geocube/RemoveRecordsTags", in, out, opts...)
	if err != nil {
		return nil, err
	}
	return out, nil
}

func (c *geocubeClient) CreateAOI(ctx context.Context, in *CreateAOIRequest, opts ...grpc.CallOption) (*CreateAOIResponse, error) {
	out := new(CreateAOIResponse)
	err := c.cc.Invoke(ctx, "/geocube.Geocube/CreateAOI", in, out, opts...)
	if err != nil {
		return nil, err
	}
	return out, nil
}

func (c *geocubeClient) GetAOI(ctx context.Context, in *GetAOIRequest, opts ...grpc.CallOption) (*GetAOIResponse, error) {
	out := new(GetAOIResponse)
	err := c.cc.Invoke(ctx, "/geocube.Geocube/GetAOI", in, out, opts...)
	if err != nil {
		return nil, err
	}
	return out, nil
}

func (c *geocubeClient) CreateVariable(ctx context.Context, in *CreateVariableRequest, opts ...grpc.CallOption) (*CreateVariableResponse, error) {
	out := new(CreateVariableResponse)
	err := c.cc.Invoke(ctx, "/geocube.Geocube/CreateVariable", in, out, opts...)
	if err != nil {
		return nil, err
	}
	return out, nil
}

func (c *geocubeClient) InstantiateVariable(ctx context.Context, in *InstantiateVariableRequest, opts ...grpc.CallOption) (*InstantiateVariableResponse, error) {
	out := new(InstantiateVariableResponse)
	err := c.cc.Invoke(ctx, "/geocube.Geocube/InstantiateVariable", in, out, opts...)
	if err != nil {
		return nil, err
	}
	return out, nil
}

func (c *geocubeClient) GetVariable(ctx context.Context, in *GetVariableRequest, opts ...grpc.CallOption) (*GetVariableResponse, error) {
	out := new(GetVariableResponse)
	err := c.cc.Invoke(ctx, "/geocube.Geocube/GetVariable", in, out, opts...)
	if err != nil {
		return nil, err
	}
	return out, nil
}

func (c *geocubeClient) ListVariables(ctx context.Context, in *ListVariablesRequest, opts ...grpc.CallOption) (Geocube_ListVariablesClient, error) {
	stream, err := c.cc.NewStream(ctx, &_Geocube_serviceDesc.Streams[1], "/geocube.Geocube/ListVariables", opts...)
	if err != nil {
		return nil, err
	}
	x := &geocubeListVariablesClient{stream}
	if err := x.ClientStream.SendMsg(in); err != nil {
		return nil, err
	}
	if err := x.ClientStream.CloseSend(); err != nil {
		return nil, err
	}
	return x, nil
}

type Geocube_ListVariablesClient interface {
	Recv() (*ListVariablesResponseItem, error)
	grpc.ClientStream
}

type geocubeListVariablesClient struct {
	grpc.ClientStream
}

func (x *geocubeListVariablesClient) Recv() (*ListVariablesResponseItem, error) {
	m := new(ListVariablesResponseItem)
	if err := x.ClientStream.RecvMsg(m); err != nil {
		return nil, err
	}
	return m, nil
}

func (c *geocubeClient) UpdateVariable(ctx context.Context, in *UpdateVariableRequest, opts ...grpc.CallOption) (*UpdateVariableResponse, error) {
	out := new(UpdateVariableResponse)
	err := c.cc.Invoke(ctx, "/geocube.Geocube/UpdateVariable", in, out, opts...)
	if err != nil {
		return nil, err
	}
	return out, nil
}

func (c *geocubeClient) UpdateInstance(ctx context.Context, in *UpdateInstanceRequest, opts ...grpc.CallOption) (*UpdateInstanceResponse, error) {
	out := new(UpdateInstanceResponse)
	err := c.cc.Invoke(ctx, "/geocube.Geocube/UpdateInstance", in, out, opts...)
	if err != nil {
		return nil, err
	}
	return out, nil
}

func (c *geocubeClient) DeleteVariable(ctx context.Context, in *DeleteVariableRequest, opts ...grpc.CallOption) (*DeleteVariableResponse, error) {
	out := new(DeleteVariableResponse)
	err := c.cc.Invoke(ctx, "/geocube.Geocube/DeleteVariable", in, out, opts...)
	if err != nil {
		return nil, err
	}
	return out, nil
}

func (c *geocubeClient) DeleteInstance(ctx context.Context, in *DeleteInstanceRequest, opts ...grpc.CallOption) (*DeleteInstanceResponse, error) {
	out := new(DeleteInstanceResponse)
	err := c.cc.Invoke(ctx, "/geocube.Geocube/DeleteInstance", in, out, opts...)
	if err != nil {
		return nil, err
	}
	return out, nil
}

func (c *geocubeClient) CreatePalette(ctx context.Context, in *CreatePaletteRequest, opts ...grpc.CallOption) (*CreatePaletteResponse, error) {
	out := new(CreatePaletteResponse)
	err := c.cc.Invoke(ctx, "/geocube.Geocube/CreatePalette", in, out, opts...)
	if err != nil {
		return nil, err
	}
	return out, nil
}

func (c *geocubeClient) IndexDatasets(ctx context.Context, in *IndexDatasetsRequest, opts ...grpc.CallOption) (*IndexDatasetsResponse, error) {
	out := new(IndexDatasetsResponse)
	err := c.cc.Invoke(ctx, "/geocube.Geocube/IndexDatasets", in, out, opts...)
	if err != nil {
		return nil, err
	}
	return out, nil
}

func (c *geocubeClient) ConfigConsolidation(ctx context.Context, in *ConfigConsolidationRequest, opts ...grpc.CallOption) (*ConfigConsolidationResponse, error) {
	out := new(ConfigConsolidationResponse)
	err := c.cc.Invoke(ctx, "/geocube.Geocube/ConfigConsolidation", in, out, opts...)
	if err != nil {
		return nil, err
	}
	return out, nil
}

func (c *geocubeClient) GetConsolidationParams(ctx context.Context, in *GetConsolidationParamsRequest, opts ...grpc.CallOption) (*GetConsolidationParamsResponse, error) {
	out := new(GetConsolidationParamsResponse)
	err := c.cc.Invoke(ctx, "/geocube.Geocube/GetConsolidationParams", in, out, opts...)
	if err != nil {
		return nil, err
	}
	return out, nil
}

func (c *geocubeClient) Consolidate(ctx context.Context, in *ConsolidateRequest, opts ...grpc.CallOption) (*ConsolidateResponse, error) {
	out := new(ConsolidateResponse)
	err := c.cc.Invoke(ctx, "/geocube.Geocube/Consolidate", in, out, opts...)
	if err != nil {
		return nil, err
	}
	return out, nil
}

func (c *geocubeClient) ListJobs(ctx context.Context, in *ListJobsRequest, opts ...grpc.CallOption) (*ListJobsResponse, error) {
	out := new(ListJobsResponse)
	err := c.cc.Invoke(ctx, "/geocube.Geocube/ListJobs", in, out, opts...)
	if err != nil {
		return nil, err
	}
	return out, nil
}

func (c *geocubeClient) GetJob(ctx context.Context, in *GetJobRequest, opts ...grpc.CallOption) (*GetJobResponse, error) {
	out := new(GetJobResponse)
	err := c.cc.Invoke(ctx, "/geocube.Geocube/GetJob", in, out, opts...)
	if err != nil {
		return nil, err
	}
	return out, nil
}

func (c *geocubeClient) CleanJobs(ctx context.Context, in *CleanJobsRequest, opts ...grpc.CallOption) (*CleanJobsResponse, error) {
	out := new(CleanJobsResponse)
	err := c.cc.Invoke(ctx, "/geocube.Geocube/CleanJobs", in, out, opts...)
	if err != nil {
		return nil, err
	}
	return out, nil
}

func (c *geocubeClient) RetryJob(ctx context.Context, in *RetryJobRequest, opts ...grpc.CallOption) (*RetryJobResponse, error) {
	out := new(RetryJobResponse)
	err := c.cc.Invoke(ctx, "/geocube.Geocube/RetryJob", in, out, opts...)
	if err != nil {
		return nil, err
	}
	return out, nil
}

func (c *geocubeClient) CancelJob(ctx context.Context, in *CancelJobRequest, opts ...grpc.CallOption) (*CancelJobResponse, error) {
	out := new(CancelJobResponse)
	err := c.cc.Invoke(ctx, "/geocube.Geocube/CancelJob", in, out, opts...)
	if err != nil {
		return nil, err
	}
	return out, nil
}

func (c *geocubeClient) ContinueJob(ctx context.Context, in *ContinueJobRequest, opts ...grpc.CallOption) (*ContinueJobResponse, error) {
	out := new(ContinueJobResponse)
	err := c.cc.Invoke(ctx, "/geocube.Geocube/ContinueJob", in, out, opts...)
	if err != nil {
		return nil, err
	}
	return out, nil
}

func (c *geocubeClient) GetCube(ctx context.Context, in *GetCubeRequest, opts ...grpc.CallOption) (Geocube_GetCubeClient, error) {
	stream, err := c.cc.NewStream(ctx, &_Geocube_serviceDesc.Streams[2], "/geocube.Geocube/GetCube", opts...)
	if err != nil {
		return nil, err
	}
	x := &geocubeGetCubeClient{stream}
	if err := x.ClientStream.SendMsg(in); err != nil {
		return nil, err
	}
	if err := x.ClientStream.CloseSend(); err != nil {
		return nil, err
	}
	return x, nil
}

type Geocube_GetCubeClient interface {
	Recv() (*GetCubeResponse, error)
	grpc.ClientStream
}

type geocubeGetCubeClient struct {
	grpc.ClientStream
}

func (x *geocubeGetCubeClient) Recv() (*GetCubeResponse, error) {
	m := new(GetCubeResponse)
	if err := x.ClientStream.RecvMsg(m); err != nil {
		return nil, err
	}
	return m, nil
}

func (c *geocubeClient) GetXYZTile(ctx context.Context, in *GetTileRequest, opts ...grpc.CallOption) (*GetTileResponse, error) {
	out := new(GetTileResponse)
	err := c.cc.Invoke(ctx, "/geocube.Geocube/GetXYZTile", in, out, opts...)
	if err != nil {
		return nil, err
	}
	return out, nil
}

func (c *geocubeClient) CreateLayout(ctx context.Context, in *CreateLayoutRequest, opts ...grpc.CallOption) (*CreateLayoutResponse, error) {
	out := new(CreateLayoutResponse)
	err := c.cc.Invoke(ctx, "/geocube.Geocube/CreateLayout", in, out, opts...)
	if err != nil {
		return nil, err
	}
	return out, nil
}

func (c *geocubeClient) DeleteLayout(ctx context.Context, in *DeleteLayoutRequest, opts ...grpc.CallOption) (*DeleteLayoutResponse, error) {
	out := new(DeleteLayoutResponse)
	err := c.cc.Invoke(ctx, "/geocube.Geocube/DeleteLayout", in, out, opts...)
	if err != nil {
		return nil, err
	}
	return out, nil
}

func (c *geocubeClient) ListLayouts(ctx context.Context, in *ListLayoutsRequest, opts ...grpc.CallOption) (*ListLayoutsResponse, error) {
	out := new(ListLayoutsResponse)
	err := c.cc.Invoke(ctx, "/geocube.Geocube/ListLayouts", in, out, opts...)
	if err != nil {
		return nil, err
	}
	return out, nil
}

func (c *geocubeClient) TileAOI(ctx context.Context, in *TileAOIRequest, opts ...grpc.CallOption) (Geocube_TileAOIClient, error) {
	stream, err := c.cc.NewStream(ctx, &_Geocube_serviceDesc.Streams[3], "/geocube.Geocube/TileAOI", opts...)
	if err != nil {
		return nil, err
	}
	x := &geocubeTileAOIClient{stream}
	if err := x.ClientStream.SendMsg(in); err != nil {
		return nil, err
	}
	if err := x.ClientStream.CloseSend(); err != nil {
		return nil, err
	}
	return x, nil
}

type Geocube_TileAOIClient interface {
	Recv() (*TileAOIResponse, error)
	grpc.ClientStream
}

type geocubeTileAOIClient struct {
	grpc.ClientStream
}

func (x *geocubeTileAOIClient) Recv() (*TileAOIResponse, error) {
	m := new(TileAOIResponse)
	if err := x.ClientStream.RecvMsg(m); err != nil {
		return nil, err
	}
	return m, nil
}

func (c *geocubeClient) CreateGrid(ctx context.Context, in *CreateGridRequest, opts ...grpc.CallOption) (*CreateGridResponse, error) {
	out := new(CreateGridResponse)
	err := c.cc.Invoke(ctx, "/geocube.Geocube/CreateGrid", in, out, opts...)
	if err != nil {
		return nil, err
	}
	return out, nil
}

func (c *geocubeClient) DeleteGrid(ctx context.Context, in *DeleteGridRequest, opts ...grpc.CallOption) (*DeleteGridResponse, error) {
	out := new(DeleteGridResponse)
	err := c.cc.Invoke(ctx, "/geocube.Geocube/DeleteGrid", in, out, opts...)
	if err != nil {
		return nil, err
	}
	return out, nil
}

func (c *geocubeClient) ListGrids(ctx context.Context, in *ListGridsRequest, opts ...grpc.CallOption) (*ListGridsResponse, error) {
	out := new(ListGridsResponse)
	err := c.cc.Invoke(ctx, "/geocube.Geocube/ListGrids", in, out, opts...)
	if err != nil {
		return nil, err
	}
	return out, nil
}

func (c *geocubeClient) Version(ctx context.Context, in *GetVersionRequest, opts ...grpc.CallOption) (*GetVersionResponse, error) {
	out := new(GetVersionResponse)
	err := c.cc.Invoke(ctx, "/geocube.Geocube/Version", in, out, opts...)
	if err != nil {
		return nil, err
	}
	return out, nil
}

// GeocubeServer is the server API for Geocube service.
type GeocubeServer interface {
	// @exclude Records
	ListRecords(*ListRecordsRequest, Geocube_ListRecordsServer) error
	CreateRecords(context.Context, *CreateRecordsRequest) (*CreateRecordsResponse, error)
	DeleteRecords(context.Context, *DeleteRecordsRequest) (*DeleteRecordsResponse, error)
	AddRecordsTags(context.Context, *AddRecordsTagsRequest) (*AddRecordsTagsResponse, error)
	RemoveRecordsTags(context.Context, *RemoveRecordsTagsRequest) (*RemoveRecordsTagsResponse, error)
	CreateAOI(context.Context, *CreateAOIRequest) (*CreateAOIResponse, error)
	GetAOI(context.Context, *GetAOIRequest) (*GetAOIResponse, error)
	// @exclude Variables
	CreateVariable(context.Context, *CreateVariableRequest) (*CreateVariableResponse, error)
	InstantiateVariable(context.Context, *InstantiateVariableRequest) (*InstantiateVariableResponse, error)
	GetVariable(context.Context, *GetVariableRequest) (*GetVariableResponse, error)
	ListVariables(*ListVariablesRequest, Geocube_ListVariablesServer) error
	UpdateVariable(context.Context, *UpdateVariableRequest) (*UpdateVariableResponse, error)
	UpdateInstance(context.Context, *UpdateInstanceRequest) (*UpdateInstanceResponse, error)
	DeleteVariable(context.Context, *DeleteVariableRequest) (*DeleteVariableResponse, error)
	DeleteInstance(context.Context, *DeleteInstanceRequest) (*DeleteInstanceResponse, error)
	CreatePalette(context.Context, *CreatePaletteRequest) (*CreatePaletteResponse, error)
	// @exclude Operations
	IndexDatasets(context.Context, *IndexDatasetsRequest) (*IndexDatasetsResponse, error)
	ConfigConsolidation(context.Context, *ConfigConsolidationRequest) (*ConfigConsolidationResponse, error)
	GetConsolidationParams(context.Context, *GetConsolidationParamsRequest) (*GetConsolidationParamsResponse, error)
	Consolidate(context.Context, *ConsolidateRequest) (*ConsolidateResponse, error)
	ListJobs(context.Context, *ListJobsRequest) (*ListJobsResponse, error)
	GetJob(context.Context, *GetJobRequest) (*GetJobResponse, error)
	CleanJobs(context.Context, *CleanJobsRequest) (*CleanJobsResponse, error)
	RetryJob(context.Context, *RetryJobRequest) (*RetryJobResponse, error)
	CancelJob(context.Context, *CancelJobRequest) (*CancelJobResponse, error)
	ContinueJob(context.Context, *ContinueJobRequest) (*ContinueJobResponse, error)
	// @exclude Catalog
	GetCube(*GetCubeRequest, Geocube_GetCubeServer) error
	GetXYZTile(context.Context, *GetTileRequest) (*GetTileResponse, error)
	// @exclude Layout
	CreateLayout(context.Context, *CreateLayoutRequest) (*CreateLayoutResponse, error)
	DeleteLayout(context.Context, *DeleteLayoutRequest) (*DeleteLayoutResponse, error)
	ListLayouts(context.Context, *ListLayoutsRequest) (*ListLayoutsResponse, error)
	TileAOI(*TileAOIRequest, Geocube_TileAOIServer) error
	// @exclude Grid
	CreateGrid(context.Context, *CreateGridRequest) (*CreateGridResponse, error)
	DeleteGrid(context.Context, *DeleteGridRequest) (*DeleteGridResponse, error)
	ListGrids(context.Context, *ListGridsRequest) (*ListGridsResponse, error)
	// @exclude Version
	Version(context.Context, *GetVersionRequest) (*GetVersionResponse, error)
}

// UnimplementedGeocubeServer can be embedded to have forward compatible implementations.
type UnimplementedGeocubeServer struct {
}

func (*UnimplementedGeocubeServer) ListRecords(*ListRecordsRequest, Geocube_ListRecordsServer) error {
	return status.Errorf(codes.Unimplemented, "method ListRecords not implemented")
}
func (*UnimplementedGeocubeServer) CreateRecords(context.Context, *CreateRecordsRequest) (*CreateRecordsResponse, error) {
	return nil, status.Errorf(codes.Unimplemented, "method CreateRecords not implemented")
}
func (*UnimplementedGeocubeServer) DeleteRecords(context.Context, *DeleteRecordsRequest) (*DeleteRecordsResponse, error) {
	return nil, status.Errorf(codes.Unimplemented, "method DeleteRecords not implemented")
}
func (*UnimplementedGeocubeServer) AddRecordsTags(context.Context, *AddRecordsTagsRequest) (*AddRecordsTagsResponse, error) {
	return nil, status.Errorf(codes.Unimplemented, "method AddRecordsTags not implemented")
}
func (*UnimplementedGeocubeServer) RemoveRecordsTags(context.Context, *RemoveRecordsTagsRequest) (*RemoveRecordsTagsResponse, error) {
	return nil, status.Errorf(codes.Unimplemented, "method RemoveRecordsTags not implemented")
}
func (*UnimplementedGeocubeServer) CreateAOI(context.Context, *CreateAOIRequest) (*CreateAOIResponse, error) {
	return nil, status.Errorf(codes.Unimplemented, "method CreateAOI not implemented")
}
func (*UnimplementedGeocubeServer) GetAOI(context.Context, *GetAOIRequest) (*GetAOIResponse, error) {
	return nil, status.Errorf(codes.Unimplemented, "method GetAOI not implemented")
}
func (*UnimplementedGeocubeServer) CreateVariable(context.Context, *CreateVariableRequest) (*CreateVariableResponse, error) {
	return nil, status.Errorf(codes.Unimplemented, "method CreateVariable not implemented")
}
func (*UnimplementedGeocubeServer) InstantiateVariable(context.Context, *InstantiateVariableRequest) (*InstantiateVariableResponse, error) {
	return nil, status.Errorf(codes.Unimplemented, "method InstantiateVariable not implemented")
}
func (*UnimplementedGeocubeServer) GetVariable(context.Context, *GetVariableRequest) (*GetVariableResponse, error) {
	return nil, status.Errorf(codes.Unimplemented, "method GetVariable not implemented")
}
func (*UnimplementedGeocubeServer) ListVariables(*ListVariablesRequest, Geocube_ListVariablesServer) error {
	return status.Errorf(codes.Unimplemented, "method ListVariables not implemented")
}
func (*UnimplementedGeocubeServer) UpdateVariable(context.Context, *UpdateVariableRequest) (*UpdateVariableResponse, error) {
	return nil, status.Errorf(codes.Unimplemented, "method UpdateVariable not implemented")
}
func (*UnimplementedGeocubeServer) UpdateInstance(context.Context, *UpdateInstanceRequest) (*UpdateInstanceResponse, error) {
	return nil, status.Errorf(codes.Unimplemented, "method UpdateInstance not implemented")
}
func (*UnimplementedGeocubeServer) DeleteVariable(context.Context, *DeleteVariableRequest) (*DeleteVariableResponse, error) {
	return nil, status.Errorf(codes.Unimplemented, "method DeleteVariable not implemented")
}
func (*UnimplementedGeocubeServer) DeleteInstance(context.Context, *DeleteInstanceRequest) (*DeleteInstanceResponse, error) {
	return nil, status.Errorf(codes.Unimplemented, "method DeleteInstance not implemented")
}
func (*UnimplementedGeocubeServer) CreatePalette(context.Context, *CreatePaletteRequest) (*CreatePaletteResponse, error) {
	return nil, status.Errorf(codes.Unimplemented, "method CreatePalette not implemented")
}
func (*UnimplementedGeocubeServer) IndexDatasets(context.Context, *IndexDatasetsRequest) (*IndexDatasetsResponse, error) {
	return nil, status.Errorf(codes.Unimplemented, "method IndexDatasets not implemented")
}
func (*UnimplementedGeocubeServer) ConfigConsolidation(context.Context, *ConfigConsolidationRequest) (*ConfigConsolidationResponse, error) {
	return nil, status.Errorf(codes.Unimplemented, "method ConfigConsolidation not implemented")
}
func (*UnimplementedGeocubeServer) GetConsolidationParams(context.Context, *GetConsolidationParamsRequest) (*GetConsolidationParamsResponse, error) {
	return nil, status.Errorf(codes.Unimplemented, "method GetConsolidationParams not implemented")
}
func (*UnimplementedGeocubeServer) Consolidate(context.Context, *ConsolidateRequest) (*ConsolidateResponse, error) {
	return nil, status.Errorf(codes.Unimplemented, "method Consolidate not implemented")
}
func (*UnimplementedGeocubeServer) ListJobs(context.Context, *ListJobsRequest) (*ListJobsResponse, error) {
	return nil, status.Errorf(codes.Unimplemented, "method ListJobs not implemented")
}
func (*UnimplementedGeocubeServer) GetJob(context.Context, *GetJobRequest) (*GetJobResponse, error) {
	return nil, status.Errorf(codes.Unimplemented, "method GetJob not implemented")
}
func (*UnimplementedGeocubeServer) CleanJobs(context.Context, *CleanJobsRequest) (*CleanJobsResponse, error) {
	return nil, status.Errorf(codes.Unimplemented, "method CleanJobs not implemented")
}
func (*UnimplementedGeocubeServer) RetryJob(context.Context, *RetryJobRequest) (*RetryJobResponse, error) {
	return nil, status.Errorf(codes.Unimplemented, "method RetryJob not implemented")
}
func (*UnimplementedGeocubeServer) CancelJob(context.Context, *CancelJobRequest) (*CancelJobResponse, error) {
	return nil, status.Errorf(codes.Unimplemented, "method CancelJob not implemented")
}
func (*UnimplementedGeocubeServer) ContinueJob(context.Context, *ContinueJobRequest) (*ContinueJobResponse, error) {
	return nil, status.Errorf(codes.Unimplemented, "method ContinueJob not implemented")
}
func (*UnimplementedGeocubeServer) GetCube(*GetCubeRequest, Geocube_GetCubeServer) error {
	return status.Errorf(codes.Unimplemented, "method GetCube not implemented")
}
func (*UnimplementedGeocubeServer) GetXYZTile(context.Context, *GetTileRequest) (*GetTileResponse, error) {
	return nil, status.Errorf(codes.Unimplemented, "method GetXYZTile not implemented")
}
func (*UnimplementedGeocubeServer) CreateLayout(context.Context, *CreateLayoutRequest) (*CreateLayoutResponse, error) {
	return nil, status.Errorf(codes.Unimplemented, "method CreateLayout not implemented")
}
func (*UnimplementedGeocubeServer) DeleteLayout(context.Context, *DeleteLayoutRequest) (*DeleteLayoutResponse, error) {
	return nil, status.Errorf(codes.Unimplemented, "method DeleteLayout not implemented")
}
func (*UnimplementedGeocubeServer) ListLayouts(context.Context, *ListLayoutsRequest) (*ListLayoutsResponse, error) {
	return nil, status.Errorf(codes.Unimplemented, "method ListLayouts not implemented")
}
func (*UnimplementedGeocubeServer) TileAOI(*TileAOIRequest, Geocube_TileAOIServer) error {
	return status.Errorf(codes.Unimplemented, "method TileAOI not implemented")
}
func (*UnimplementedGeocubeServer) CreateGrid(context.Context, *CreateGridRequest) (*CreateGridResponse, error) {
	return nil, status.Errorf(codes.Unimplemented, "method CreateGrid not implemented")
}
func (*UnimplementedGeocubeServer) DeleteGrid(context.Context, *DeleteGridRequest) (*DeleteGridResponse, error) {
	return nil, status.Errorf(codes.Unimplemented, "method DeleteGrid not implemented")
}
func (*UnimplementedGeocubeServer) ListGrids(context.Context, *ListGridsRequest) (*ListGridsResponse, error) {
	return nil, status.Errorf(codes.Unimplemented, "method ListGrids not implemented")
}
func (*UnimplementedGeocubeServer) Version(context.Context, *GetVersionRequest) (*GetVersionResponse, error) {
	return nil, status.Errorf(codes.Unimplemented, "method Version not implemented")
}

func RegisterGeocubeServer(s *grpc.Server, srv GeocubeServer) {
	s.RegisterService(&_Geocube_serviceDesc, srv)
}

func _Geocube_ListRecords_Handler(srv interface{}, stream grpc.ServerStream) error {
	m := new(ListRecordsRequest)
	if err := stream.RecvMsg(m); err != nil {
		return err
	}
	return srv.(GeocubeServer).ListRecords(m, &geocubeListRecordsServer{stream})
}

type Geocube_ListRecordsServer interface {
	Send(*ListRecordsResponseItem) error
	grpc.ServerStream
}

type geocubeListRecordsServer struct {
	grpc.ServerStream
}

func (x *geocubeListRecordsServer) Send(m *ListRecordsResponseItem) error {
	return x.ServerStream.SendMsg(m)
}

func _Geocube_CreateRecords_Handler(srv interface{}, ctx context.Context, dec func(interface{}) error, interceptor grpc.UnaryServerInterceptor) (interface{}, error) {
	in := new(CreateRecordsRequest)
	if err := dec(in); err != nil {
		return nil, err
	}
	if interceptor == nil {
		return srv.(GeocubeServer).CreateRecords(ctx, in)
	}
	info := &grpc.UnaryServerInfo{
		Server:     srv,
		FullMethod: "/geocube.Geocube/CreateRecords",
	}
	handler := func(ctx context.Context, req interface{}) (interface{}, error) {
		return srv.(GeocubeServer).CreateRecords(ctx, req.(*CreateRecordsRequest))
	}
	return interceptor(ctx, in, info, handler)
}

func _Geocube_DeleteRecords_Handler(srv interface{}, ctx context.Context, dec func(interface{}) error, interceptor grpc.UnaryServerInterceptor) (interface{}, error) {
	in := new(DeleteRecordsRequest)
	if err := dec(in); err != nil {
		return nil, err
	}
	if interceptor == nil {
		return srv.(GeocubeServer).DeleteRecords(ctx, in)
	}
	info := &grpc.UnaryServerInfo{
		Server:     srv,
		FullMethod: "/geocube.Geocube/DeleteRecords",
	}
	handler := func(ctx context.Context, req interface{}) (interface{}, error) {
		return srv.(GeocubeServer).DeleteRecords(ctx, req.(*DeleteRecordsRequest))
	}
	return interceptor(ctx, in, info, handler)
}

func _Geocube_AddRecordsTags_Handler(srv interface{}, ctx context.Context, dec func(interface{}) error, interceptor grpc.UnaryServerInterceptor) (interface{}, error) {
	in := new(AddRecordsTagsRequest)
	if err := dec(in); err != nil {
		return nil, err
	}
	if interceptor == nil {
		return srv.(GeocubeServer).AddRecordsTags(ctx, in)
	}
	info := &grpc.UnaryServerInfo{
		Server:     srv,
		FullMethod: "/geocube.Geocube/AddRecordsTags",
	}
	handler := func(ctx context.Context, req interface{}) (interface{}, error) {
		return srv.(GeocubeServer).AddRecordsTags(ctx, req.(*AddRecordsTagsRequest))
	}
	return interceptor(ctx, in, info, handler)
}

func _Geocube_RemoveRecordsTags_Handler(srv interface{}, ctx context.Context, dec func(interface{}) error, interceptor grpc.UnaryServerInterceptor) (interface{}, error) {
	in := new(RemoveRecordsTagsRequest)
	if err := dec(in); err != nil {
		return nil, err
	}
	if interceptor == nil {
		return srv.(GeocubeServer).RemoveRecordsTags(ctx, in)
	}
	info := &grpc.UnaryServerInfo{
		Server:     srv,
		FullMethod: "/geocube.Geocube/RemoveRecordsTags",
	}
	handler := func(ctx context.Context, req interface{}) (interface{}, error) {
		return srv.(GeocubeServer).RemoveRecordsTags(ctx, req.(*RemoveRecordsTagsRequest))
	}
	return interceptor(ctx, in, info, handler)
}

func _Geocube_CreateAOI_Handler(srv interface{}, ctx context.Context, dec func(interface{}) error, interceptor grpc.UnaryServerInterceptor) (interface{}, error) {
	in := new(CreateAOIRequest)
	if err := dec(in); err != nil {
		return nil, err
	}
	if interceptor == nil {
		return srv.(GeocubeServer).CreateAOI(ctx, in)
	}
	info := &grpc.UnaryServerInfo{
		Server:     srv,
		FullMethod: "/geocube.Geocube/CreateAOI",
	}
	handler := func(ctx context.Context, req interface{}) (interface{}, error) {
		return srv.(GeocubeServer).CreateAOI(ctx, req.(*CreateAOIRequest))
	}
	return interceptor(ctx, in, info, handler)
}

func _Geocube_GetAOI_Handler(srv interface{}, ctx context.Context, dec func(interface{}) error, interceptor grpc.UnaryServerInterceptor) (interface{}, error) {
	in := new(GetAOIRequest)
	if err := dec(in); err != nil {
		return nil, err
	}
	if interceptor == nil {
		return srv.(GeocubeServer).GetAOI(ctx, in)
	}
	info := &grpc.UnaryServerInfo{
		Server:     srv,
		FullMethod: "/geocube.Geocube/GetAOI",
	}
	handler := func(ctx context.Context, req interface{}) (interface{}, error) {
		return srv.(GeocubeServer).GetAOI(ctx, req.(*GetAOIRequest))
	}
	return interceptor(ctx, in, info, handler)
}

func _Geocube_CreateVariable_Handler(srv interface{}, ctx context.Context, dec func(interface{}) error, interceptor grpc.UnaryServerInterceptor) (interface{}, error) {
	in := new(CreateVariableRequest)
	if err := dec(in); err != nil {
		return nil, err
	}
	if interceptor == nil {
		return srv.(GeocubeServer).CreateVariable(ctx, in)
	}
	info := &grpc.UnaryServerInfo{
		Server:     srv,
		FullMethod: "/geocube.Geocube/CreateVariable",
	}
	handler := func(ctx context.Context, req interface{}) (interface{}, error) {
		return srv.(GeocubeServer).CreateVariable(ctx, req.(*CreateVariableRequest))
	}
	return interceptor(ctx, in, info, handler)
}

func _Geocube_InstantiateVariable_Handler(srv interface{}, ctx context.Context, dec func(interface{}) error, interceptor grpc.UnaryServerInterceptor) (interface{}, error) {
	in := new(InstantiateVariableRequest)
	if err := dec(in); err != nil {
		return nil, err
	}
	if interceptor == nil {
		return srv.(GeocubeServer).InstantiateVariable(ctx, in)
	}
	info := &grpc.UnaryServerInfo{
		Server:     srv,
		FullMethod: "/geocube.Geocube/InstantiateVariable",
	}
	handler := func(ctx context.Context, req interface{}) (interface{}, error) {
		return srv.(GeocubeServer).InstantiateVariable(ctx, req.(*InstantiateVariableRequest))
	}
	return interceptor(ctx, in, info, handler)
}

func _Geocube_GetVariable_Handler(srv interface{}, ctx context.Context, dec func(interface{}) error, interceptor grpc.UnaryServerInterceptor) (interface{}, error) {
	in := new(GetVariableRequest)
	if err := dec(in); err != nil {
		return nil, err
	}
	if interceptor == nil {
		return srv.(GeocubeServer).GetVariable(ctx, in)
	}
	info := &grpc.UnaryServerInfo{
		Server:     srv,
		FullMethod: "/geocube.Geocube/GetVariable",
	}
	handler := func(ctx context.Context, req interface{}) (interface{}, error) {
		return srv.(GeocubeServer).GetVariable(ctx, req.(*GetVariableRequest))
	}
	return interceptor(ctx, in, info, handler)
}

func _Geocube_ListVariables_Handler(srv interface{}, stream grpc.ServerStream) error {
	m := new(ListVariablesRequest)
	if err := stream.RecvMsg(m); err != nil {
		return err
	}
	return srv.(GeocubeServer).ListVariables(m, &geocubeListVariablesServer{stream})
}

type Geocube_ListVariablesServer interface {
	Send(*ListVariablesResponseItem) error
	grpc.ServerStream
}

type geocubeListVariablesServer struct {
	grpc.ServerStream
}

func (x *geocubeListVariablesServer) Send(m *ListVariablesResponseItem) error {
	return x.ServerStream.SendMsg(m)
}

func _Geocube_UpdateVariable_Handler(srv interface{}, ctx context.Context, dec func(interface{}) error, interceptor grpc.UnaryServerInterceptor) (interface{}, error) {
	in := new(UpdateVariableRequest)
	if err := dec(in); err != nil {
		return nil, err
	}
	if interceptor == nil {
		return srv.(GeocubeServer).UpdateVariable(ctx, in)
	}
	info := &grpc.UnaryServerInfo{
		Server:     srv,
		FullMethod: "/geocube.Geocube/UpdateVariable",
	}
	handler := func(ctx context.Context, req interface{}) (interface{}, error) {
		return srv.(GeocubeServer).UpdateVariable(ctx, req.(*UpdateVariableRequest))
	}
	return interceptor(ctx, in, info, handler)
}

func _Geocube_UpdateInstance_Handler(srv interface{}, ctx context.Context, dec func(interface{}) error, interceptor grpc.UnaryServerInterceptor) (interface{}, error) {
	in := new(UpdateInstanceRequest)
	if err := dec(in); err != nil {
		return nil, err
	}
	if interceptor == nil {
		return srv.(GeocubeServer).UpdateInstance(ctx, in)
	}
	info := &grpc.UnaryServerInfo{
		Server:     srv,
		FullMethod: "/geocube.Geocube/UpdateInstance",
	}
	handler := func(ctx context.Context, req interface{}) (interface{}, error) {
		return srv.(GeocubeServer).UpdateInstance(ctx, req.(*UpdateInstanceRequest))
	}
	return interceptor(ctx, in, info, handler)
}

func _Geocube_DeleteVariable_Handler(srv interface{}, ctx context.Context, dec func(interface{}) error, interceptor grpc.UnaryServerInterceptor) (interface{}, error) {
	in := new(DeleteVariableRequest)
	if err := dec(in); err != nil {
		return nil, err
	}
	if interceptor == nil {
		return srv.(GeocubeServer).DeleteVariable(ctx, in)
	}
	info := &grpc.UnaryServerInfo{
		Server:     srv,
		FullMethod: "/geocube.Geocube/DeleteVariable",
	}
	handler := func(ctx context.Context, req interface{}) (interface{}, error) {
		return srv.(GeocubeServer).DeleteVariable(ctx, req.(*DeleteVariableRequest))
	}
	return interceptor(ctx, in, info, handler)
}

func _Geocube_DeleteInstance_Handler(srv interface{}, ctx context.Context, dec func(interface{}) error, interceptor grpc.UnaryServerInterceptor) (interface{}, error) {
	in := new(DeleteInstanceRequest)
	if err := dec(in); err != nil {
		return nil, err
	}
	if interceptor == nil {
		return srv.(GeocubeServer).DeleteInstance(ctx, in)
	}
	info := &grpc.UnaryServerInfo{
		Server:     srv,
		FullMethod: "/geocube.Geocube/DeleteInstance",
	}
	handler := func(ctx context.Context, req interface{}) (interface{}, error) {
		return srv.(GeocubeServer).DeleteInstance(ctx, req.(*DeleteInstanceRequest))
	}
	return interceptor(ctx, in, info, handler)
}

func _Geocube_CreatePalette_Handler(srv interface{}, ctx context.Context, dec func(interface{}) error, interceptor grpc.UnaryServerInterceptor) (interface{}, error) {
	in := new(CreatePaletteRequest)
	if err := dec(in); err != nil {
		return nil, err
	}
	if interceptor == nil {
		return srv.(GeocubeServer).CreatePalette(ctx, in)
	}
	info := &grpc.UnaryServerInfo{
		Server:     srv,
		FullMethod: "/geocube.Geocube/CreatePalette",
	}
	handler := func(ctx context.Context, req interface{}) (interface{}, error) {
		return srv.(GeocubeServer).CreatePalette(ctx, req.(*CreatePaletteRequest))
	}
	return interceptor(ctx, in, info, handler)
}

func _Geocube_IndexDatasets_Handler(srv interface{}, ctx context.Context, dec func(interface{}) error, interceptor grpc.UnaryServerInterceptor) (interface{}, error) {
	in := new(IndexDatasetsRequest)
	if err := dec(in); err != nil {
		return nil, err
	}
	if interceptor == nil {
		return srv.(GeocubeServer).IndexDatasets(ctx, in)
	}
	info := &grpc.UnaryServerInfo{
		Server:     srv,
		FullMethod: "/geocube.Geocube/IndexDatasets",
	}
	handler := func(ctx context.Context, req interface{}) (interface{}, error) {
		return srv.(GeocubeServer).IndexDatasets(ctx, req.(*IndexDatasetsRequest))
	}
	return interceptor(ctx, in, info, handler)
}

func _Geocube_ConfigConsolidation_Handler(srv interface{}, ctx context.Context, dec func(interface{}) error, interceptor grpc.UnaryServerInterceptor) (interface{}, error) {
	in := new(ConfigConsolidationRequest)
	if err := dec(in); err != nil {
		return nil, err
	}
	if interceptor == nil {
		return srv.(GeocubeServer).ConfigConsolidation(ctx, in)
	}
	info := &grpc.UnaryServerInfo{
		Server:     srv,
		FullMethod: "/geocube.Geocube/ConfigConsolidation",
	}
	handler := func(ctx context.Context, req interface{}) (interface{}, error) {
		return srv.(GeocubeServer).ConfigConsolidation(ctx, req.(*ConfigConsolidationRequest))
	}
	return interceptor(ctx, in, info, handler)
}

func _Geocube_GetConsolidationParams_Handler(srv interface{}, ctx context.Context, dec func(interface{}) error, interceptor grpc.UnaryServerInterceptor) (interface{}, error) {
	in := new(GetConsolidationParamsRequest)
	if err := dec(in); err != nil {
		return nil, err
	}
	if interceptor == nil {
		return srv.(GeocubeServer).GetConsolidationParams(ctx, in)
	}
	info := &grpc.UnaryServerInfo{
		Server:     srv,
		FullMethod: "/geocube.Geocube/GetConsolidationParams",
	}
	handler := func(ctx context.Context, req interface{}) (interface{}, error) {
		return srv.(GeocubeServer).GetConsolidationParams(ctx, req.(*GetConsolidationParamsRequest))
	}
	return interceptor(ctx, in, info, handler)
}

func _Geocube_Consolidate_Handler(srv interface{}, ctx context.Context, dec func(interface{}) error, interceptor grpc.UnaryServerInterceptor) (interface{}, error) {
	in := new(ConsolidateRequest)
	if err := dec(in); err != nil {
		return nil, err
	}
	if interceptor == nil {
		return srv.(GeocubeServer).Consolidate(ctx, in)
	}
	info := &grpc.UnaryServerInfo{
		Server:     srv,
		FullMethod: "/geocube.Geocube/Consolidate",
	}
	handler := func(ctx context.Context, req interface{}) (interface{}, error) {
		return srv.(GeocubeServer).Consolidate(ctx, req.(*ConsolidateRequest))
	}
	return interceptor(ctx, in, info, handler)
}

func _Geocube_ListJobs_Handler(srv interface{}, ctx context.Context, dec func(interface{}) error, interceptor grpc.UnaryServerInterceptor) (interface{}, error) {
	in := new(ListJobsRequest)
	if err := dec(in); err != nil {
		return nil, err
	}
	if interceptor == nil {
		return srv.(GeocubeServer).ListJobs(ctx, in)
	}
	info := &grpc.UnaryServerInfo{
		Server:     srv,
		FullMethod: "/geocube.Geocube/ListJobs",
	}
	handler := func(ctx context.Context, req interface{}) (interface{}, error) {
		return srv.(GeocubeServer).ListJobs(ctx, req.(*ListJobsRequest))
	}
	return interceptor(ctx, in, info, handler)
}

func _Geocube_GetJob_Handler(srv interface{}, ctx context.Context, dec func(interface{}) error, interceptor grpc.UnaryServerInterceptor) (interface{}, error) {
	in := new(GetJobRequest)
	if err := dec(in); err != nil {
		return nil, err
	}
	if interceptor == nil {
		return srv.(GeocubeServer).GetJob(ctx, in)
	}
	info := &grpc.UnaryServerInfo{
		Server:     srv,
		FullMethod: "/geocube.Geocube/GetJob",
	}
	handler := func(ctx context.Context, req interface{}) (interface{}, error) {
		return srv.(GeocubeServer).GetJob(ctx, req.(*GetJobRequest))
	}
	return interceptor(ctx, in, info, handler)
}

func _Geocube_CleanJobs_Handler(srv interface{}, ctx context.Context, dec func(interface{}) error, interceptor grpc.UnaryServerInterceptor) (interface{}, error) {
	in := new(CleanJobsRequest)
	if err := dec(in); err != nil {
		return nil, err
	}
	if interceptor == nil {
		return srv.(GeocubeServer).CleanJobs(ctx, in)
	}
	info := &grpc.UnaryServerInfo{
		Server:     srv,
		FullMethod: "/geocube.Geocube/CleanJobs",
	}
	handler := func(ctx context.Context, req interface{}) (interface{}, error) {
		return srv.(GeocubeServer).CleanJobs(ctx, req.(*CleanJobsRequest))
	}
	return interceptor(ctx, in, info, handler)
}

func _Geocube_RetryJob_Handler(srv interface{}, ctx context.Context, dec func(interface{}) error, interceptor grpc.UnaryServerInterceptor) (interface{}, error) {
	in := new(RetryJobRequest)
	if err := dec(in); err != nil {
		return nil, err
	}
	if interceptor == nil {
		return srv.(GeocubeServer).RetryJob(ctx, in)
	}
	info := &grpc.UnaryServerInfo{
		Server:     srv,
		FullMethod: "/geocube.Geocube/RetryJob",
	}
	handler := func(ctx context.Context, req interface{}) (interface{}, error) {
		return srv.(GeocubeServer).RetryJob(ctx, req.(*RetryJobRequest))
	}
	return interceptor(ctx, in, info, handler)
}

func _Geocube_CancelJob_Handler(srv interface{}, ctx context.Context, dec func(interface{}) error, interceptor grpc.UnaryServerInterceptor) (interface{}, error) {
	in := new(CancelJobRequest)
	if err := dec(in); err != nil {
		return nil, err
	}
	if interceptor == nil {
		return srv.(GeocubeServer).CancelJob(ctx, in)
	}
	info := &grpc.UnaryServerInfo{
		Server:     srv,
		FullMethod: "/geocube.Geocube/CancelJob",
	}
	handler := func(ctx context.Context, req interface{}) (interface{}, error) {
		return srv.(GeocubeServer).CancelJob(ctx, req.(*CancelJobRequest))
	}
	return interceptor(ctx, in, info, handler)
}

func _Geocube_ContinueJob_Handler(srv interface{}, ctx context.Context, dec func(interface{}) error, interceptor grpc.UnaryServerInterceptor) (interface{}, error) {
	in := new(ContinueJobRequest)
	if err := dec(in); err != nil {
		return nil, err
	}
	if interceptor == nil {
		return srv.(GeocubeServer).ContinueJob(ctx, in)
	}
	info := &grpc.UnaryServerInfo{
		Server:     srv,
		FullMethod: "/geocube.Geocube/ContinueJob",
	}
	handler := func(ctx context.Context, req interface{}) (interface{}, error) {
		return srv.(GeocubeServer).ContinueJob(ctx, req.(*ContinueJobRequest))
	}
	return interceptor(ctx, in, info, handler)
}

func _Geocube_GetCube_Handler(srv interface{}, stream grpc.ServerStream) error {
	m := new(GetCubeRequest)
	if err := stream.RecvMsg(m); err != nil {
		return err
	}
	return srv.(GeocubeServer).GetCube(m, &geocubeGetCubeServer{stream})
}

type Geocube_GetCubeServer interface {
	Send(*GetCubeResponse) error
	grpc.ServerStream
}

type geocubeGetCubeServer struct {
	grpc.ServerStream
}

func (x *geocubeGetCubeServer) Send(m *GetCubeResponse) error {
	return x.ServerStream.SendMsg(m)
}

func _Geocube_GetXYZTile_Handler(srv interface{}, ctx context.Context, dec func(interface{}) error, interceptor grpc.UnaryServerInterceptor) (interface{}, error) {
	in := new(GetTileRequest)
	if err := dec(in); err != nil {
		return nil, err
	}
	if interceptor == nil {
		return srv.(GeocubeServer).GetXYZTile(ctx, in)
	}
	info := &grpc.UnaryServerInfo{
		Server:     srv,
		FullMethod: "/geocube.Geocube/GetXYZTile",
	}
	handler := func(ctx context.Context, req interface{}) (interface{}, error) {
		return srv.(GeocubeServer).GetXYZTile(ctx, req.(*GetTileRequest))
	}
	return interceptor(ctx, in, info, handler)
}

func _Geocube_CreateLayout_Handler(srv interface{}, ctx context.Context, dec func(interface{}) error, interceptor grpc.UnaryServerInterceptor) (interface{}, error) {
	in := new(CreateLayoutRequest)
	if err := dec(in); err != nil {
		return nil, err
	}
	if interceptor == nil {
		return srv.(GeocubeServer).CreateLayout(ctx, in)
	}
	info := &grpc.UnaryServerInfo{
		Server:     srv,
		FullMethod: "/geocube.Geocube/CreateLayout",
	}
	handler := func(ctx context.Context, req interface{}) (interface{}, error) {
		return srv.(GeocubeServer).CreateLayout(ctx, req.(*CreateLayoutRequest))
	}
	return interceptor(ctx, in, info, handler)
}

func _Geocube_DeleteLayout_Handler(srv interface{}, ctx context.Context, dec func(interface{}) error, interceptor grpc.UnaryServerInterceptor) (interface{}, error) {
	in := new(DeleteLayoutRequest)
	if err := dec(in); err != nil {
		return nil, err
	}
	if interceptor == nil {
		return srv.(GeocubeServer).DeleteLayout(ctx, in)
	}
	info := &grpc.UnaryServerInfo{
		Server:     srv,
		FullMethod: "/geocube.Geocube/DeleteLayout",
	}
	handler := func(ctx context.Context, req interface{}) (interface{}, error) {
		return srv.(GeocubeServer).DeleteLayout(ctx, req.(*DeleteLayoutRequest))
	}
	return interceptor(ctx, in, info, handler)
}

func _Geocube_ListLayouts_Handler(srv interface{}, ctx context.Context, dec func(interface{}) error, interceptor grpc.UnaryServerInterceptor) (interface{}, error) {
	in := new(ListLayoutsRequest)
	if err := dec(in); err != nil {
		return nil, err
	}
	if interceptor == nil {
		return srv.(GeocubeServer).ListLayouts(ctx, in)
	}
	info := &grpc.UnaryServerInfo{
		Server:     srv,
		FullMethod: "/geocube.Geocube/ListLayouts",
	}
	handler := func(ctx context.Context, req interface{}) (interface{}, error) {
		return srv.(GeocubeServer).ListLayouts(ctx, req.(*ListLayoutsRequest))
	}
	return interceptor(ctx, in, info, handler)
}

func _Geocube_TileAOI_Handler(srv interface{}, stream grpc.ServerStream) error {
	m := new(TileAOIRequest)
	if err := stream.RecvMsg(m); err != nil {
		return err
	}
	return srv.(GeocubeServer).TileAOI(m, &geocubeTileAOIServer{stream})
}

type Geocube_TileAOIServer interface {
	Send(*TileAOIResponse) error
	grpc.ServerStream
}

type geocubeTileAOIServer struct {
	grpc.ServerStream
}

func (x *geocubeTileAOIServer) Send(m *TileAOIResponse) error {
	return x.ServerStream.SendMsg(m)
}

func _Geocube_CreateGrid_Handler(srv interface{}, ctx context.Context, dec func(interface{}) error, interceptor grpc.UnaryServerInterceptor) (interface{}, error) {
	in := new(CreateGridRequest)
	if err := dec(in); err != nil {
		return nil, err
	}
	if interceptor == nil {
		return srv.(GeocubeServer).CreateGrid(ctx, in)
	}
	info := &grpc.UnaryServerInfo{
		Server:     srv,
		FullMethod: "/geocube.Geocube/CreateGrid",
	}
	handler := func(ctx context.Context, req interface{}) (interface{}, error) {
		return srv.(GeocubeServer).CreateGrid(ctx, req.(*CreateGridRequest))
	}
	return interceptor(ctx, in, info, handler)
}

func _Geocube_DeleteGrid_Handler(srv interface{}, ctx context.Context, dec func(interface{}) error, interceptor grpc.UnaryServerInterceptor) (interface{}, error) {
	in := new(DeleteGridRequest)
	if err := dec(in); err != nil {
		return nil, err
	}
	if interceptor == nil {
		return srv.(GeocubeServer).DeleteGrid(ctx, in)
	}
	info := &grpc.UnaryServerInfo{
		Server:     srv,
		FullMethod: "/geocube.Geocube/DeleteGrid",
	}
	handler := func(ctx context.Context, req interface{}) (interface{}, error) {
		return srv.(GeocubeServer).DeleteGrid(ctx, req.(*DeleteGridRequest))
	}
	return interceptor(ctx, in, info, handler)
}

func _Geocube_ListGrids_Handler(srv interface{}, ctx context.Context, dec func(interface{}) error, interceptor grpc.UnaryServerInterceptor) (interface{}, error) {
	in := new(ListGridsRequest)
	if err := dec(in); err != nil {
		return nil, err
	}
	if interceptor == nil {
		return srv.(GeocubeServer).ListGrids(ctx, in)
	}
	info := &grpc.UnaryServerInfo{
		Server:     srv,
		FullMethod: "/geocube.Geocube/ListGrids",
	}
	handler := func(ctx context.Context, req interface{}) (interface{}, error) {
		return srv.(GeocubeServer).ListGrids(ctx, req.(*ListGridsRequest))
	}
	return interceptor(ctx, in, info, handler)
}

func _Geocube_Version_Handler(srv interface{}, ctx context.Context, dec func(interface{}) error, interceptor grpc.UnaryServerInterceptor) (interface{}, error) {
	in := new(GetVersionRequest)
	if err := dec(in); err != nil {
		return nil, err
	}
	if interceptor == nil {
		return srv.(GeocubeServer).Version(ctx, in)
	}
	info := &grpc.UnaryServerInfo{
		Server:     srv,
		FullMethod: "/geocube.Geocube/Version",
	}
	handler := func(ctx context.Context, req interface{}) (interface{}, error) {
		return srv.(GeocubeServer).Version(ctx, req.(*GetVersionRequest))
	}
	return interceptor(ctx, in, info, handler)
}

var _Geocube_serviceDesc = grpc.ServiceDesc{
	ServiceName: "geocube.Geocube",
	HandlerType: (*GeocubeServer)(nil),
	Methods: []grpc.MethodDesc{
		{
			MethodName: "CreateRecords",
			Handler:    _Geocube_CreateRecords_Handler,
		},
		{
			MethodName: "DeleteRecords",
			Handler:    _Geocube_DeleteRecords_Handler,
		},
		{
			MethodName: "AddRecordsTags",
			Handler:    _Geocube_AddRecordsTags_Handler,
		},
		{
			MethodName: "RemoveRecordsTags",
			Handler:    _Geocube_RemoveRecordsTags_Handler,
		},
		{
			MethodName: "CreateAOI",
			Handler:    _Geocube_CreateAOI_Handler,
		},
		{
			MethodName: "GetAOI",
			Handler:    _Geocube_GetAOI_Handler,
		},
		{
			MethodName: "CreateVariable",
			Handler:    _Geocube_CreateVariable_Handler,
		},
		{
			MethodName: "InstantiateVariable",
			Handler:    _Geocube_InstantiateVariable_Handler,
		},
		{
			MethodName: "GetVariable",
			Handler:    _Geocube_GetVariable_Handler,
		},
		{
			MethodName: "UpdateVariable",
			Handler:    _Geocube_UpdateVariable_Handler,
		},
		{
			MethodName: "UpdateInstance",
			Handler:    _Geocube_UpdateInstance_Handler,
		},
		{
			MethodName: "DeleteVariable",
			Handler:    _Geocube_DeleteVariable_Handler,
		},
		{
			MethodName: "DeleteInstance",
			Handler:    _Geocube_DeleteInstance_Handler,
		},
		{
			MethodName: "CreatePalette",
			Handler:    _Geocube_CreatePalette_Handler,
		},
		{
			MethodName: "IndexDatasets",
			Handler:    _Geocube_IndexDatasets_Handler,
		},
		{
			MethodName: "ConfigConsolidation",
			Handler:    _Geocube_ConfigConsolidation_Handler,
		},
		{
			MethodName: "GetConsolidationParams",
			Handler:    _Geocube_GetConsolidationParams_Handler,
		},
		{
			MethodName: "Consolidate",
			Handler:    _Geocube_Consolidate_Handler,
		},
		{
			MethodName: "ListJobs",
			Handler:    _Geocube_ListJobs_Handler,
		},
		{
			MethodName: "GetJob",
			Handler:    _Geocube_GetJob_Handler,
		},
		{
			MethodName: "CleanJobs",
			Handler:    _Geocube_CleanJobs_Handler,
		},
		{
			MethodName: "RetryJob",
			Handler:    _Geocube_RetryJob_Handler,
		},
		{
			MethodName: "CancelJob",
			Handler:    _Geocube_CancelJob_Handler,
		},
		{
			MethodName: "ContinueJob",
			Handler:    _Geocube_ContinueJob_Handler,
		},
		{
			MethodName: "GetXYZTile",
			Handler:    _Geocube_GetXYZTile_Handler,
		},
		{
			MethodName: "CreateLayout",
			Handler:    _Geocube_CreateLayout_Handler,
		},
		{
			MethodName: "DeleteLayout",
			Handler:    _Geocube_DeleteLayout_Handler,
		},
		{
			MethodName: "ListLayouts",
			Handler:    _Geocube_ListLayouts_Handler,
		},
		{
			MethodName: "CreateGrid",
			Handler:    _Geocube_CreateGrid_Handler,
		},
		{
			MethodName: "DeleteGrid",
			Handler:    _Geocube_DeleteGrid_Handler,
		},
		{
			MethodName: "ListGrids",
			Handler:    _Geocube_ListGrids_Handler,
		},
		{
			MethodName: "Version",
			Handler:    _Geocube_Version_Handler,
		},
	},
	Streams: []grpc.StreamDesc{
		{
			StreamName:    "ListRecords",
			Handler:       _Geocube_ListRecords_Handler,
			ServerStreams: true,
		},
		{
			StreamName:    "ListVariables",
			Handler:       _Geocube_ListVariables_Handler,
			ServerStreams: true,
		},
		{
			StreamName:    "GetCube",
			Handler:       _Geocube_GetCube_Handler,
			ServerStreams: true,
		},
		{
			StreamName:    "TileAOI",
			Handler:       _Geocube_TileAOI_Handler,
			ServerStreams: true,
		},
	},
	Metadata: "pb/geocube.proto",
}
